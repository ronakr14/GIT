{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to GIT Notes","text":"<p>Welcome to the GIT notes, your comprehensive guide to mastering GIT, the powerful distributed version control system. Explore the following sections to deepen your understanding and effectively manage your codebase:</p> <ol> <li> <p>Basics: An introduction to essential GIT commands and concepts to get you started with version control.</p> </li> <li> <p>Add: Learn how to stage changes in your working directory for the next commit.</p> </li> <li> <p>Aliases: Discover how to create custom shortcuts for GIT commands to streamline your workflow.</p> </li> <li> <p>Archive: Understand how to create archives of your repository contents.</p> </li> <li> <p>Bisect: Explore how to use the bisect command to identify the commit that introduced a bug.</p> </li> <li> <p>Blame: Learn how to track down who last modified each line of a file.</p> </li> <li> <p>Branch: Get to know how to create and manage branches to work on different features or fixes independently.</p> </li> <li> <p>Checkout: Understand how to switch branches or restore working tree files.</p> </li> <li> <p>Checkout-Sparse: Learn about sparse checkouts to work with a subset of the repository.</p> </li> <li> <p>Cherrypick: Discover how to apply commits from one branch to another.</p> </li> <li> <p>Clean: Learn how to remove untracked files from your working directory.</p> </li> <li> <p>Clone: Understand how to create a copy of a repository.</p> </li> <li> <p>Commit: Get familiar with creating snapshots of your changes and committing them to the repository.</p> </li> <li> <p>Config: Explore how to configure your GIT settings and preferences.</p> </li> <li> <p>Conflicts: Learn how to resolve conflicts that arise during merging or rebasing.</p> </li> <li> <p>Diff: Understand how to view the differences between files or commits.</p> </li> <li> <p>Fetch: Discover how to retrieve updates from a remote repository without merging them.</p> </li> <li> <p>Filter: Learn about filtering the repository history to extract or modify specific content.</p> </li> <li> <p>Git Attribute: Explore how to manage file attributes and behaviors with <code>.gitattributes</code>.</p> </li> <li> <p>Hooks: Understand how to automate tasks with GIT hooks.</p> </li> <li> <p>Ignore: Learn how to exclude files from being tracked by GIT with <code>.gitignore</code>.</p> </li> <li> <p>Init: Get started by initializing a new GIT repository.</p> </li> <li> <p>LFS: Discover how to manage large files with Git Large File Storage (LFS).</p> </li> <li> <p>Log: Learn how to view the commit history of a repository.</p> </li> <li> <p>Merge: Understand how to combine changes from different branches.</p> </li> <li> <p>Patch: Explore how to create and apply patches to changes.</p> </li> <li> <p>Pull: Discover how to fetch and integrate changes from a remote repository.</p> </li> <li> <p>Push: Learn how to upload your local changes to a remote repository.</p> </li> <li> <p>Rebase: Understand how to reapply commits on top of another base tip.</p> </li> <li> <p>Recover: Explore methods for recovering lost commits or changes.</p> </li> <li> <p>Send Email: Learn how to send commit emails using GIT.</p> </li> <li> <p>Show: Discover how to display various types of GIT objects, including commits and tags.</p> </li> <li> <p>Squash: Understand how to combine multiple commits into a single commit.</p> </li> <li> <p>Stash: Learn how to temporarily save changes and clean your working directory.</p> </li> <li> <p>Status: Explore how to check the state of your working directory and staging area.</p> </li> <li> <p>Submodules: Get familiar with managing submodules, or repositories within repositories.</p> </li> <li> <p>Subtrees: Learn about integrating repositories with the subtree command.</p> </li> <li> <p>SVN: Discover how to interact with Subversion (SVN) repositories using GIT.</p> </li> <li> <p>TFS: Understand how to work with Team Foundation Server (TFS) repositories in GIT.</p> </li> <li> <p>Undo: Learn how to reverse changes or undo operations in GIT.</p> </li> <li> <p>Workflow: Explore different GIT workflows and best practices for collaborative development.</p> </li> <li> <p>Worktree: Understand how to manage multiple working directories with a single repository.</p> </li> <li> <p>Git Useful Snippets: Access a collection of useful GIT snippets and tips for everyday tasks.</p> </li> </ol>"},{"location":"add/","title":"Git Add Commands","text":""},{"location":"add/#overview","title":"Overview","text":"<p>The <code>git add</code> command is used to add changes in the working directory to the staging area. This is the first step in the Git workflow to prepare changes for the next commit. This document covers the basic and advanced usage of <code>git add</code>.</p>"},{"location":"add/#adding-all-changes","title":"Adding All Changes","text":""},{"location":"add/#git-add","title":"<code>git add .</code>","text":"<p>Adds all changes (new, modified, and deleted files) in the current directory and subdirectories to the staging area.</p> <pre><code>git add .\n</code></pre>"},{"location":"add/#example","title":"Example","text":"<pre><code>git add .\n</code></pre> <p>This command stages all changes in the repository for the next commit.</p>"},{"location":"add/#git-add-a","title":"<code>git add -A</code>","text":"<p>Adds all changes (new, modified, and deleted files) in the entire working directory to the staging area.</p> <pre><code>git add -A\n</code></pre>"},{"location":"add/#example_1","title":"Example","text":"<pre><code>git add -A\n</code></pre> <p>This command stages all changes in the repository, including those outside the current directory.</p>"},{"location":"add/#adding-specific-files","title":"Adding Specific Files","text":""},{"location":"add/#git-add-file","title":"<code>git add &lt;file&gt;</code>","text":"<p>Adds changes in a specific file to the staging area.</p> <pre><code>git add &lt;file&gt;\n</code></pre>"},{"location":"add/#example_2","title":"Example","text":"<pre><code>git add README.md\n</code></pre> <p>This command stages changes in the <code>README.md</code> file for the next commit.</p>"},{"location":"add/#git-add-directory","title":"<code>git add &lt;directory&gt;</code>","text":"<p>Adds changes in a specific directory to the staging area.</p> <pre><code>git add &lt;directory&gt;\n</code></pre>"},{"location":"add/#example_3","title":"Example","text":"<pre><code>git add src/\n</code></pre> <p>This command stages changes in the <code>src/</code> directory for the next commit.</p>"},{"location":"add/#adding-changes-interactively","title":"Adding Changes Interactively","text":""},{"location":"add/#git-add-i","title":"<code>git add -i</code>","text":"<p>Starts an interactive mode for adding changes to the staging area.</p> <pre><code>git add -i\n</code></pre>"},{"location":"add/#example_4","title":"Example","text":"<pre><code>git add -i\n</code></pre> <p>This command opens an interactive prompt where you can choose which changes to add to the staging area.</p>"},{"location":"add/#git-add-p","title":"<code>git add -p</code>","text":"<p>Adds changes in a patch mode, allowing you to select specific changes to add.</p> <pre><code>git add -p\n</code></pre>"},{"location":"add/#example_5","title":"Example","text":"<pre><code>git add -p\n</code></pre> <p>This command opens an interactive prompt to review and stage changes hunk by hunk.</p>"},{"location":"add/#adding-all-tracked-files","title":"Adding All Tracked Files","text":""},{"location":"add/#git-add-u","title":"<code>git add -u</code>","text":"<p>Adds changes in all tracked files to the staging area, excluding new files.</p> <pre><code>git add -u\n</code></pre>"},{"location":"add/#example_6","title":"Example","text":"<pre><code>git add -u\n</code></pre> <p>This command stages changes (modifications and deletions) in all tracked files.</p>"},{"location":"add/#adding-ignored-files","title":"Adding Ignored Files","text":""},{"location":"add/#git-add-f","title":"<code>git add -f</code>","text":"<p>Forces the addition of ignored files to the staging area.</p> <pre><code>git add -f &lt;file&gt;\n</code></pre>"},{"location":"add/#example_7","title":"Example","text":"<pre><code>git add -f .env\n</code></pre> <p>This command forces the addition of the <code>.env</code> file, even if it is listed in the <code>.gitignore</code>.</p>"},{"location":"add/#dry-run","title":"Dry Run","text":""},{"location":"add/#git-add-dry-run","title":"<code>git add --dry-run</code>","text":"<p>Shows what would be added to the staging area without actually adding the files.</p> <pre><code>git add --dry-run &lt;file&gt;\n</code></pre>"},{"location":"add/#example_8","title":"Example","text":"<pre><code>git add --dry-run .\n</code></pre> <p>This command shows what would be staged for commit without actually staging any changes.</p>"},{"location":"add/#summary","title":"Summary","text":"<p>The <code>git add</code> command is a fundamental part of the Git workflow, allowing you to prepare changes for the next commit. It offers various options to add specific files, directories, and changes interactively or selectively. For more detailed information on each command, refer to the official Git documentation.</p>"},{"location":"alias/","title":"Git Alias Tutorial","text":""},{"location":"alias/#overview","title":"Overview","text":"<p>Git aliases allow you to create shortcuts for longer commands, making your workflow more efficient. This document will cover the basics of creating and using Git aliases with examples.</p>"},{"location":"alias/#creating-a-git-alias","title":"Creating a Git Alias","text":"<p>To create a Git alias, use the <code>git config</code> command with the <code>alias</code> prefix followed by the desired alias and the command it represents.</p>"},{"location":"alias/#example","title":"Example","text":"<pre><code>git config --global alias.co checkout\n</code></pre> <p>This command creates a global alias <code>co</code> for the <code>checkout</code> command.</p>"},{"location":"alias/#common-git-aliases","title":"Common Git Aliases","text":""},{"location":"alias/#status","title":"Status","text":"<p>Alias for the <code>status</code> command:</p> <pre><code>git config --global alias.st status\n</code></pre>"},{"location":"alias/#example_1","title":"Example","text":"<pre><code>git st\n</code></pre> <p>This will run <code>git status</code>.</p>"},{"location":"alias/#commit","title":"Commit","text":"<p>Alias for the <code>commit -m</code> command:</p> <pre><code>git config --global alias.ci 'commit -m'\n</code></pre>"},{"location":"alias/#example_2","title":"Example","text":"<pre><code>git ci \"Initial commit\"\n</code></pre> <p>This will run <code>git commit -m \"Initial commit\"</code>.</p>"},{"location":"alias/#log","title":"Log","text":"<p>Alias for a pretty log format:</p> <pre><code>git config --global alias.lg \"log --oneline --graph --decorate --all\"\n</code></pre>"},{"location":"alias/#example_3","title":"Example","text":"<pre><code>git lg\n</code></pre> <p>This will run <code>git log --oneline --graph --decorate --all</code>.</p>"},{"location":"alias/#checkout","title":"Checkout","text":"<p>Alias for the <code>checkout</code> command:</p> <pre><code>git config --global alias.co checkout\n</code></pre>"},{"location":"alias/#example_4","title":"Example","text":"<pre><code>git co main\n</code></pre> <p>This will run <code>git checkout main</code>.</p>"},{"location":"alias/#branch","title":"Branch","text":"<p>Alias for the <code>branch</code> command:</p> <pre><code>git config --global alias.br branch\n</code></pre>"},{"location":"alias/#example_5","title":"Example","text":"<pre><code>git br\n</code></pre> <p>This will run <code>git branch</code>.</p>"},{"location":"alias/#global-vs-local-aliases","title":"Global vs. Local Aliases","text":"<p>Aliases can be configured globally (for all repositories) or locally (for a specific repository).</p>"},{"location":"alias/#global-alias","title":"Global Alias","text":"<p>To create a global alias, use the <code>--global</code> flag:</p> <pre><code>git config --global alias.ci 'commit -m'\n</code></pre>"},{"location":"alias/#local-alias","title":"Local Alias","text":"<p>To create a local alias, omit the <code>--global</code> flag and run the command within the repository:</p> <pre><code>git config alias.ci 'commit -m'\n</code></pre>"},{"location":"alias/#managing-aliases","title":"Managing Aliases","text":""},{"location":"alias/#listing-all-aliases","title":"Listing All Aliases","text":"<p>To list all configured aliases, use:</p> <pre><code>git config --get-regexp alias\n</code></pre>"},{"location":"alias/#example_6","title":"Example","text":"<pre><code>git config --get-regexp alias\n</code></pre> <p>This will list all aliases and their corresponding commands.</p>"},{"location":"alias/#removing-an-alias","title":"Removing an Alias","text":"<p>To remove an alias, use the <code>--unset</code> flag:</p> <pre><code>git config --global --unset alias.ci\n</code></pre>"},{"location":"alias/#example_7","title":"Example","text":"<pre><code>git config --global --unset alias.ci\n</code></pre> <p>This will remove the global alias <code>ci</code>.</p>"},{"location":"alias/#useful-tips","title":"Useful Tips","text":"<ul> <li> <p>Complex Commands: You can create aliases for complex commands by quoting the entire command.</p> <pre><code>git config --global alias.amend 'commit --amend --no-edit'\n</code></pre> </li> <li> <p>Combining Aliases: Aliases can call other aliases, allowing for modular and reusable configurations.</p> </li> <li> <p>Shell Shortcuts: You can combine Git aliases with shell aliases or functions for even more powerful shortcuts.</p> </li> </ul>"},{"location":"alias/#summary","title":"Summary","text":"<p>Git aliases are a powerful way to streamline your workflow by creating shortcuts for frequently used commands. By understanding how to create, manage, and use aliases, you can make your Git usage more efficient and enjoyable.</p>"},{"location":"archive/","title":"Git Archive Tutorial","text":""},{"location":"archive/#overview","title":"Overview","text":"<p>The <code>git archive</code> command is used to create an archive of files from a Git repository. This can be useful for exporting the contents of a repository, creating snapshots of specific commits, or preparing releases. The archive is typically created in formats like <code>.tar</code>, <code>.zip</code>, or <code>.tar.gz</code>.</p>"},{"location":"archive/#what-is-git-archive","title":"What is <code>git archive</code>","text":"<p><code>git archive</code> is a Git command that creates an archive of files from a Git repository. It allows you to export the contents of the repository as a compressed file (e.g., <code>.zip</code>, <code>.tar.gz</code>) at a specific commit, branch, or tag.</p>"},{"location":"archive/#basic-syntax","title":"Basic Syntax","text":"<pre><code>git archive [options] &lt;commit&gt; --output=&lt;archive-file&gt;\n</code></pre> <ul> <li><code>&lt;commit&gt;</code>: The commit, branch, or tag to archive.</li> <li><code>--output=&lt;archive-file&gt;</code>: The name of the output archive file.</li> </ul>"},{"location":"archive/#creating-archives","title":"Creating Archives","text":""},{"location":"archive/#archive-format","title":"Archive Format","text":"<p>You can specify the format of the archive using the <code>--format</code> option. Common formats include <code>tar</code>, <code>zip</code>, and <code>tar.gz</code>.</p>"},{"location":"archive/#archive-specific-commit","title":"Archive Specific Commit","text":"<p>To create an archive of a specific commit:</p> <pre><code>git archive --format=zip --output=archive.zip &lt;commit&gt;\n</code></pre>"},{"location":"archive/#archive-a-branch","title":"Archive a Branch","text":"<p>To create an archive of the latest commit on a branch:</p> <pre><code>git archive --format=tar --output=branch.tar &lt;branch-name&gt;\n</code></pre>"},{"location":"archive/#archive-a-tag","title":"Archive a Tag","text":"<p>To create an archive of a specific tag:</p> <pre><code>git archive --format=tar.gz --output=tag.tar.gz &lt;tag-name&gt;\n</code></pre>"},{"location":"archive/#examples-of-using-git-archive","title":"Examples of Using <code>git archive</code>","text":""},{"location":"archive/#example-1-creating-a-zip-archive-of-the-latest-commit","title":"Example 1: Creating a ZIP Archive of the Latest Commit","text":"<p>To create a ZIP archive of the latest commit on the <code>main</code> branch:</p> <pre><code>git archive --format=zip --output=main-latest.zip main\n</code></pre>"},{"location":"archive/#example-2-creating-a-tar-archive-of-a-specific-tag","title":"Example 2: Creating a TAR Archive of a Specific Tag","text":"<p>To create a TAR archive of a tag named <code>v1.0.0</code>:</p> <pre><code>git archive --format=tar --output=v1.0.0.tar v1.0.0\n</code></pre>"},{"location":"archive/#example-3-creating-a-gzipped-tar-archive-of-a-branch","title":"Example 3: Creating a GZipped TAR Archive of a Branch","text":"<p>To create a gzipped TAR archive of the <code>develop</code> branch:</p> <pre><code>git archive --format=tar.gz --output=develop.tar.gz develop\n</code></pre>"},{"location":"archive/#example-4-creating-an-archive-and-compressing-it-with-gzip","title":"Example 4: Creating an Archive and Compressing it with Gzip","text":"<p>To create a TAR archive and compress it with Gzip:</p> <pre><code>git archive --format=tar &lt;branch-or-tag&gt; | gzip &gt; archive.tar.gz\n</code></pre>"},{"location":"archive/#common-use-cases","title":"Common Use Cases","text":"<ul> <li>Releasing Software: Create a snapshot of your repository at a specific commit, tag, or branch for distribution.</li> <li>Backup: Archive the current state of a repository for backup purposes.</li> <li>Exporting Code: Export a portion of the repository's code without including the entire Git history.</li> </ul>"},{"location":"archive/#summary","title":"Summary","text":"<p>The <code>git archive</code> command is a versatile tool for creating archives of Git repository contents. It allows you to export files at specific commits, branches, or tags in various formats, such as <code>.zip</code>, <code>.tar</code>, and <code>.tar.gz</code>. This can be useful for software releases, backups, or exporting code.</p>"},{"location":"basic_commands/","title":"Basic Git Commands","text":""},{"location":"basic_commands/#overview","title":"Overview","text":"<p>Git is a distributed version control system designed to handle everything from small to very large projects with speed and efficiency. This document covers the essential Git commands you'll need to manage your projects.</p>"},{"location":"basic_commands/#initializing-a-repository","title":"Initializing a Repository","text":""},{"location":"basic_commands/#git-init","title":"<code>git init</code>","text":"<p>Initializes a new Git repository.</p> <pre><code>git init\n</code></pre>"},{"location":"basic_commands/#example","title":"Example","text":"<pre><code>git init my-new-repo\ncd my-new-repo\n</code></pre> <p>This creates a new directory <code>my-new-repo</code> with a Git repository initialized.</p>"},{"location":"basic_commands/#cloning-a-repository","title":"Cloning a Repository","text":""},{"location":"basic_commands/#git-clone","title":"<code>git clone</code>","text":"<p>Clones an existing repository.</p> <pre><code>git clone &lt;repository-url&gt;\n</code></pre>"},{"location":"basic_commands/#example_1","title":"Example","text":"<pre><code>git clone https://github.com/user/repo.git\n</code></pre> <p>This command clones the repository from the specified URL to your local machine.</p>"},{"location":"basic_commands/#checking-the-status","title":"Checking the Status","text":""},{"location":"basic_commands/#git-status","title":"<code>git status</code>","text":"<p>Displays the state of the working directory and the staging area.</p> <pre><code>git status\n</code></pre>"},{"location":"basic_commands/#example_2","title":"Example","text":"<pre><code>git status\n</code></pre> <p>This command shows which changes have been staged, which haven't, and which files aren't being tracked by Git.</p>"},{"location":"basic_commands/#adding-changes","title":"Adding Changes","text":""},{"location":"basic_commands/#git-add","title":"<code>git add</code>","text":"<p>Adds changes to the staging area.</p> <pre><code>git add &lt;file&gt;\n</code></pre> <p>To add all changes:</p> <pre><code>git add .\n</code></pre>"},{"location":"basic_commands/#example_3","title":"Example","text":"<pre><code>git add README.md\n</code></pre> <p>This command stages the changes made to <code>README.md</code>.</p>"},{"location":"basic_commands/#committing-changes","title":"Committing Changes","text":""},{"location":"basic_commands/#git-commit","title":"<code>git commit</code>","text":"<p>Records changes to the repository.</p> <pre><code>git commit -m \"Commit message\"\n</code></pre>"},{"location":"basic_commands/#example_4","title":"Example","text":"<pre><code>git commit -m \"Add initial project files\"\n</code></pre> <p>This command commits the staged changes with the message \"Add initial project files\".</p>"},{"location":"basic_commands/#viewing-commit-history","title":"Viewing Commit History","text":""},{"location":"basic_commands/#git-log","title":"<code>git log</code>","text":"<p>Displays the commit history.</p> <pre><code>git log\n</code></pre>"},{"location":"basic_commands/#example_5","title":"Example","text":"<pre><code>git log\n</code></pre> <p>This command shows a list of commits in reverse chronological order.</p>"},{"location":"basic_commands/#creating-a-branch","title":"Creating a Branch","text":""},{"location":"basic_commands/#git-branch","title":"<code>git branch</code>","text":"<p>Lists, creates, or deletes branches.</p> <p>To list branches:</p> <pre><code>git branch\n</code></pre> <p>To create a new branch:</p> <pre><code>git branch &lt;branch-name&gt;\n</code></pre>"},{"location":"basic_commands/#example_6","title":"Example","text":"<pre><code>git branch new-feature\n</code></pre> <p>This command creates a new branch named <code>new-feature</code>.</p>"},{"location":"basic_commands/#switching-branches","title":"Switching Branches","text":""},{"location":"basic_commands/#git-checkout","title":"<code>git checkout</code>","text":"<p>Switches branches or restores working tree files.</p> <p>To switch branches:</p> <pre><code>git checkout &lt;branch-name&gt;\n</code></pre>"},{"location":"basic_commands/#example_7","title":"Example","text":"<pre><code>git checkout new-feature\n</code></pre> <p>This command switches to the <code>new-feature</code> branch.</p>"},{"location":"basic_commands/#merging-branches","title":"Merging Branches","text":""},{"location":"basic_commands/#git-merge","title":"<code>git merge</code>","text":"<p>Merges one or more branches into the current branch.</p> <pre><code>git merge &lt;branch-name&gt;\n</code></pre>"},{"location":"basic_commands/#example_8","title":"Example","text":"<pre><code>git merge new-feature\n</code></pre> <p>This command merges the <code>new-feature</code> branch into the current branch.</p>"},{"location":"basic_commands/#pulling-changes","title":"Pulling Changes","text":""},{"location":"basic_commands/#git-pull","title":"<code>git pull</code>","text":"<p>Fetches and integrates changes from a remote repository to the current branch.</p> <pre><code>git pull\n</code></pre>"},{"location":"basic_commands/#example_9","title":"Example","text":"<pre><code>git pull origin main\n</code></pre> <p>This command fetches and merges changes from the <code>main</code> branch of the remote repository.</p>"},{"location":"basic_commands/#pushing-changes","title":"Pushing Changes","text":""},{"location":"basic_commands/#git-push","title":"<code>git push</code>","text":"<p>Updates the remote repository with local commits.</p> <pre><code>git push\n</code></pre>"},{"location":"basic_commands/#example_10","title":"Example","text":"<pre><code>git push origin main\n</code></pre> <p>This command pushes the local <code>main</code> branch to the remote repository.</p>"},{"location":"basic_commands/#summary","title":"Summary","text":"<p>These basic Git commands will help you get started with version control for your projects. For more detailed information on each command, refer to the official Git documentation.</p>"},{"location":"bisect/","title":"Git Bisect Tutorial","text":""},{"location":"bisect/#overview","title":"Overview","text":"<p>The <code>git bisect</code> command is a powerful tool for identifying the commit that introduced a bug or issue in a Git repository. By performing a binary search through the commit history, <code>git bisect</code> helps you efficiently locate the specific commit where a problem first appeared.</p>"},{"location":"bisect/#what-is-git-bisect","title":"What is <code>git bisect</code>","text":"<p><code>git bisect</code> is a command used to perform a binary search through your commit history to find the commit that introduced a specific bug or issue. The process involves marking commits as good or bad and narrowing down the search until the problematic commit is identified.</p>"},{"location":"bisect/#basic-syntax","title":"Basic Syntax","text":"<pre><code>git bisect start\ngit bisect bad [commit]\ngit bisect good [commit]\ngit bisect run &lt;test-script&gt;\ngit bisect reset\n</code></pre> <ul> <li><code>git bisect start</code>: Start the bisecting process.</li> <li><code>git bisect bad [commit]</code>: Mark the current commit or a specified commit as bad (contains the issue).</li> <li><code>git bisect good [commit]</code>: Mark the current commit or a specified commit as good (does not contain the issue).</li> <li><code>git bisect run &lt;test-script&gt;</code>: Automatically test each commit with the provided script to identify the bad commit.</li> <li><code>git bisect reset</code>: End the bisect session and return to the original branch.</li> </ul>"},{"location":"bisect/#how-to-use-git-bisect","title":"How to Use <code>git bisect</code>","text":""},{"location":"bisect/#step-1-start-bisecting","title":"Step 1: Start Bisecting","text":"<p>Begin the bisecting process:</p> <pre><code>git bisect start\n</code></pre>"},{"location":"bisect/#step-2-mark-the-bad-commit","title":"Step 2: Mark the Bad Commit","text":"<p>Specify the commit that is known to have the bug:</p> <pre><code>git bisect bad\n</code></pre>"},{"location":"bisect/#step-3-mark-the-good-commit","title":"Step 3: Mark the Good Commit","text":"<p>Specify a commit that is known to be good (where the bug did not exist):</p> <pre><code>git bisect good &lt;commit&gt;\n</code></pre>"},{"location":"bisect/#step-4-test-each-commit","title":"Step 4: Test Each Commit","text":"<p>Git will checkout a commit between the good and bad commits for you to test. You need to check if the bug exists in this commit and then mark it accordingly:</p> <ul> <li> <p>If the bug is present in the commit, mark it as bad:</p> <pre><code>git bisect bad\n</code></pre> </li> <li> <p>If the bug is not present, mark it as good:</p> <pre><code>git bisect good\n</code></pre> </li> </ul> <p>Repeat this process until Git identifies the exact commit that introduced the issue.</p>"},{"location":"bisect/#step-5-end-bisect-session","title":"Step 5: End Bisect Session","text":"<p>Once the problematic commit is identified, end the bisect session and return to the original branch:</p> <pre><code>git bisect reset\n</code></pre>"},{"location":"bisect/#examples-of-using-git-bisect","title":"Examples of Using <code>git bisect</code>","text":""},{"location":"bisect/#example-1-basic-manual-bisecting","title":"Example 1: Basic Manual Bisecting","text":"<ol> <li> <p>Start Bisecting:</p> <pre><code>git bisect start\n</code></pre> </li> <li> <p>Mark Bad Commit:</p> <pre><code>git bisect bad\n</code></pre> </li> <li> <p>Mark Good Commit:</p> <pre><code>git bisect good &lt;commit&gt;\n</code></pre> </li> <li> <p>Test Commits: </p> <p>Test each commit Git checks out and mark as <code>bad</code> or <code>good</code>.</p> </li> <li> <p>End Bisect Session:</p> <pre><code>git bisect reset\n</code></pre> </li> </ol>"},{"location":"bisect/#example-2-automated-bisecting-with-a-test-script","title":"Example 2: Automated Bisecting with a Test Script","text":"<p>If you have a test script that can automatically determine if a commit is good or bad, you can use <code>git bisect run</code> to automate the process.</p> <ol> <li> <p>Create a Test Script:</p> <pre><code>#!/bin/bash\n# test.sh\nmake test\n</code></pre> </li> <li> <p>Run Bisect with Script:</p> <pre><code>git bisect start\ngit bisect bad\ngit bisect good &lt;commit&gt;\ngit bisect run ./test.sh\n</code></pre> </li> <li> <p>Git will automatically test commits and identify the problematic commit.</p> </li> </ol>"},{"location":"bisect/#example-3-finding-the-commit-that-introduced-a-bug","title":"Example 3: Finding the Commit That Introduced a Bug","text":"<ol> <li> <p>Start Bisecting:</p> <pre><code>git bisect start\n</code></pre> </li> <li> <p>Mark the Current Commit as Bad:</p> <pre><code>git bisect bad\n</code></pre> </li> <li> <p>Mark a Known Good Commit:</p> <pre><code>git bisect good &lt;good-commit-hash&gt;\n</code></pre> </li> <li> <p>Test and Mark Commits:</p> <p>Mark each commit as <code>good</code> or <code>bad</code> until the problematic commit is found.</p> </li> <li> <p>End Bisect Session:</p> <pre><code>git bisect reset\n</code></pre> </li> </ol>"},{"location":"bisect/#common-use-cases","title":"Common Use Cases","text":"<ul> <li>Debugging: Identifying the commit that introduced a bug or issue in the code.</li> <li>Code Review: Finding when a specific feature or change was added.</li> <li>Regression Testing: Tracking down when a regression or unwanted change occurred.</li> </ul>"},{"location":"bisect/#summary","title":"Summary","text":"<p>The <code>git bisect</code> command is a powerful tool for locating the commit that introduced a bug or issue by performing a binary search through the commit history. By marking commits as good or bad and using automated testing scripts, you can efficiently identify problematic changes and resolve issues in your repository.</p>"},{"location":"blame/","title":"Git Blame Tutorial","text":""},{"location":"blame/#overview","title":"Overview","text":"<p>The <code>git blame</code> command is used to display the last modification for each line in a file. It shows which commit and author are responsible for each line of a file, which can be helpful for tracking down the origin of changes and understanding the history of a file.</p>"},{"location":"blame/#what-is-git-blame","title":"What is Git Blame?","text":"<p><code>git blame</code> annotates each line in a file with information about the last commit that modified that line. It provides a way to track who made changes to specific parts of a file and when those changes were made.</p>"},{"location":"blame/#basic-usage","title":"Basic Usage","text":"<p>The basic syntax for <code>git blame</code> is:</p> <pre><code>git blame &lt;file&gt;\n</code></pre>"},{"location":"blame/#example","title":"Example","text":"<p>To see who last modified each line in <code>example.txt</code>:</p> <pre><code>git blame example.txt\n</code></pre> <p>This will output a list of lines with the commit hash, author, and date for each line in <code>example.txt</code>.</p>"},{"location":"blame/#blame-with-specific-commits","title":"Blame with Specific Commits","text":"<p>You can also use <code>git blame</code> to show annotations starting from a specific commit or branch.</p>"},{"location":"blame/#example_1","title":"Example","text":"<p>To blame a file starting from a specific commit:</p> <pre><code>git blame &lt;commit-hash&gt; &lt;file&gt;\n</code></pre>"},{"location":"blame/#example_2","title":"Example","text":"<pre><code>git blame abc1234 example.txt\n</code></pre> <p>This shows the blame annotations for <code>example.txt</code> starting from the commit <code>abc1234</code>.</p>"},{"location":"blame/#blame-with-file-history","title":"Blame with File History","text":"<p>To blame a file based on its history, use the <code>-L</code> option to limit the range of lines:</p>"},{"location":"blame/#example_3","title":"Example","text":"<p>To blame lines 10 to 20 of <code>example.txt</code>:</p> <pre><code>git blame -L 10,20 example.txt\n</code></pre> <p>This restricts the blame output to lines 10 through 20.</p>"},{"location":"blame/#blame-with-custom-formatting","title":"Blame with Custom Formatting","text":"<p>You can customize the output of <code>git blame</code> using the <code>-p</code> option to include more details:</p>"},{"location":"blame/#example_4","title":"Example","text":"<p>To get a detailed output with commit information and author details:</p> <pre><code>git blame -p example.txt\n</code></pre> <p>The <code>-p</code> option provides a more detailed output with additional metadata for each line.</p>"},{"location":"blame/#blame-and-annotations","title":"Blame and Annotations","text":"<p><code>git blame</code> can also be combined with <code>git log</code> to get additional information about changes:</p>"},{"location":"blame/#example_5","title":"Example","text":"<p>To see detailed information about the commit that last modified a line:</p> <ol> <li> <p>First, use <code>git blame</code> to get the commit hash:</p> <pre><code>git blame example.txt\n</code></pre> </li> <li> <p>Then, use <code>git log</code> to get more details about the commit:</p> <pre><code>git log -p &lt;commit-hash&gt;\n</code></pre> </li> </ol>"},{"location":"blame/#example_6","title":"Example","text":"<pre><code>git blame example.txt\n# Output might include:\n# abc1234 (John Doe 2024-01-01 10:00:00 +0000 15) Line of code\n\ngit log -p abc1234\n</code></pre> <p>This shows the details of the commit <code>abc1234</code>, including changes made and the commit message.</p>"},{"location":"blame/#useful-tips","title":"Useful Tips","text":"<ul> <li> <p>Blame for Multiple Files: You can pass multiple files to <code>git blame</code> to see annotations for several files at once.</p> <pre><code>git blame file1.txt file2.txt\n</code></pre> </li> <li> <p>Blame Options: Explore additional options with <code>git blame --help</code> to customize the output and functionality.</p> </li> <li> <p>Performance: For large files or repositories, blame operations might be slow. Use specific line ranges or commits to improve performance.</p> </li> </ul>"},{"location":"blame/#summary","title":"Summary","text":"<p>The <code>git blame</code> command is a powerful tool for tracking changes in files and understanding the history of modifications. By using various options, you can customize the output, limit the blame to specific lines or commits, and get detailed information about changes. Understanding how to use <code>git blame</code> effectively can help you manage and troubleshoot your codebase more efficiently.</p>"},{"location":"branch/","title":"Git Branch Commands","text":""},{"location":"branch/#overview","title":"Overview","text":"<p>The <code>git branch</code> command is used to manage branches in a Git repository. Branches allow you to work on separate features or fixes independently from the main codebase. This document covers the basic and advanced usage of <code>git branch</code>.</p>"},{"location":"branch/#listing-branches","title":"Listing Branches","text":""},{"location":"branch/#git-branch","title":"<code>git branch</code>","text":"<p>Lists all local branches in the repository.</p> <pre><code>git branch\n</code></pre>"},{"location":"branch/#example","title":"Example","text":"<pre><code>git branch\n</code></pre> <p>This command lists all local branches and highlights the current branch with an asterisk.</p>"},{"location":"branch/#git-branch-r","title":"<code>git branch -r</code>","text":"<p>Lists all remote branches.</p> <pre><code>git branch -r\n</code></pre>"},{"location":"branch/#example_1","title":"Example","text":"<pre><code>git branch -r\n</code></pre> <p>This command lists all branches available on the remote repository.</p>"},{"location":"branch/#git-branch-a","title":"<code>git branch -a</code>","text":"<p>Lists all local and remote branches.</p> <pre><code>git branch -a\n</code></pre>"},{"location":"branch/#example_2","title":"Example","text":"<pre><code>git branch -a\n</code></pre> <p>This command lists all local and remote branches in the repository.</p>"},{"location":"branch/#creating-branches","title":"Creating Branches","text":""},{"location":"branch/#git-branch-branch","title":"<code>git branch &lt;branch&gt;</code>","text":"<p>Creates a new branch with the specified name.</p> <pre><code>git branch &lt;branch&gt;\n</code></pre>"},{"location":"branch/#example_3","title":"Example","text":"<pre><code>git branch feature-branch\n</code></pre> <p>This command creates a new branch named <code>feature-branch</code>.</p>"},{"location":"branch/#deleting-branches","title":"Deleting Branches","text":""},{"location":"branch/#git-branch-d-branch","title":"<code>git branch -d &lt;branch&gt;</code>","text":"<p>Deletes a local branch safely, preventing deletion if it contains unmerged changes.</p> <pre><code>git branch -d &lt;branch&gt;\n</code></pre>"},{"location":"branch/#example_4","title":"Example","text":"<pre><code>git branch -d feature-branch\n</code></pre> <p>This command deletes the <code>feature-branch</code> if it has been fully merged into the current branch.</p>"},{"location":"branch/#git-branch-d-branch_1","title":"<code>git branch -D &lt;branch&gt;</code>","text":"<p>Forcefully deletes a local branch, regardless of its merge status.</p> <pre><code>git branch -D &lt;branch&gt;\n</code></pre>"},{"location":"branch/#example_5","title":"Example","text":"<pre><code>git branch -D feature-branch\n</code></pre> <p>This command forcefully deletes the <code>feature-branch</code>, even if it has unmerged changes.</p>"},{"location":"branch/#renaming-branches","title":"Renaming Branches","text":""},{"location":"branch/#git-branch-m-old-branch-new-branch","title":"<code>git branch -m &lt;old-branch&gt; &lt;new-branch&gt;</code>","text":"<p>Renames a local branch.</p> <pre><code>git branch -m &lt;old-branch&gt; &lt;new-branch&gt;\n</code></pre>"},{"location":"branch/#example_6","title":"Example","text":"<pre><code>git branch -m old-feature-branch new-feature-branch\n</code></pre> <p>This command renames the local branch from <code>old-feature-branch</code> to <code>new-feature-branch</code>.</p>"},{"location":"branch/#git-branch-m-new-branch","title":"<code>git branch -m &lt;new-branch&gt;</code>","text":"<p>Renames the current branch.</p> <pre><code>git branch -m &lt;new-branch&gt;\n</code></pre>"},{"location":"branch/#example_7","title":"Example","text":"<pre><code>git branch -m new-branch\n</code></pre> <p>This command renames the current branch to <code>new-branch</code>.</p>"},{"location":"branch/#switching-branches","title":"Switching Branches","text":""},{"location":"branch/#git-checkout-branch","title":"<code>git checkout &lt;branch&gt;</code>","text":"<p>Switches to the specified branch.</p> <pre><code>git checkout &lt;branch&gt;\n</code></pre>"},{"location":"branch/#example_8","title":"Example","text":"<pre><code>git checkout main\n</code></pre> <p>This command switches to the <code>main</code> branch.</p>"},{"location":"branch/#git-switch-branch","title":"<code>git switch &lt;branch&gt;</code>","text":"<p>Switches to the specified branch (alternative to <code>git checkout</code>).</p> <pre><code>git switch &lt;branch&gt;\n</code></pre>"},{"location":"branch/#example_9","title":"Example","text":"<pre><code>git switch main\n</code></pre> <p>This command switches to the <code>main</code> branch using the <code>git switch</code> command.</p>"},{"location":"branch/#creating-and-switching-branches","title":"Creating and Switching Branches","text":""},{"location":"branch/#git-checkout-b-branch","title":"<code>git checkout -b &lt;branch&gt;</code>","text":"<p>Creates a new branch and switches to it.</p> <pre><code>git checkout -b &lt;branch&gt;\n</code></pre>"},{"location":"branch/#example_10","title":"Example","text":"<pre><code>git checkout -b feature-branch\n</code></pre> <p>This command creates a new branch named <code>feature-branch</code> and switches to it.</p>"},{"location":"branch/#git-switch-c-branch","title":"<code>git switch -c &lt;branch&gt;</code>","text":"<p>Creates a new branch and switches to it (alternative to <code>git checkout -b</code>).</p> <pre><code>git switch -c &lt;branch&gt;\n</code></pre>"},{"location":"branch/#example_11","title":"Example","text":"<pre><code>git switch -c feature-branch\n</code></pre> <p>This command creates a new branch named <code>feature-branch</code> and switches to it using the <code>git switch</code> command.</p>"},{"location":"branch/#tracking-remote-branches","title":"Tracking Remote Branches","text":""},{"location":"branch/#git-branch-track-branch-remotebranch","title":"<code>git branch --track &lt;branch&gt; &lt;remote&gt;/&lt;branch&gt;</code>","text":"<p>Creates a new local branch that tracks a remote branch.</p> <pre><code>git branch --track &lt;branch&gt; &lt;remote&gt;/&lt;branch&gt;\n</code></pre>"},{"location":"branch/#example_12","title":"Example","text":"<pre><code>git branch --track feature-branch origin/feature-branch\n</code></pre> <p>This command creates a new local branch <code>feature-branch</code> that tracks the <code>origin/feature-branch</code> remote branch.</p>"},{"location":"branch/#summary","title":"Summary","text":"<p>The <code>git branch</code> command is crucial for managing branches within your Git repository. It allows you to create, delete, rename, and list branches, as well as switch between them and track remote branches. For more detailed information on each command, refer to the official Git documentation.</p>"},{"location":"checkout/","title":"Git Checkout Commands","text":""},{"location":"checkout/#overview","title":"Overview","text":"<p>The <code>git checkout</code> command is used to switch between branches or restore working tree files. This document covers the basic and advanced usage of <code>git checkout</code>.</p>"},{"location":"checkout/#switching-branches","title":"Switching Branches","text":""},{"location":"checkout/#git-checkout-branch","title":"<code>git checkout &lt;branch&gt;</code>","text":"<p>Switches to the specified branch.</p> <pre><code>git checkout &lt;branch&gt;\n</code></pre>"},{"location":"checkout/#example","title":"Example","text":"<pre><code>git checkout main\n</code></pre> <p>This command switches to the <code>main</code> branch.</p>"},{"location":"checkout/#creating-and-switching-to-a-new-branch","title":"Creating and Switching to a New Branch","text":""},{"location":"checkout/#git-checkout-b-branch","title":"<code>git checkout -b &lt;branch&gt;</code>","text":"<p>Creates a new branch and switches to it.</p> <pre><code>git checkout -b &lt;branch&gt;\n</code></pre>"},{"location":"checkout/#example_1","title":"Example","text":"<pre><code>git checkout -b feature-branch\n</code></pre> <p>This command creates a new branch named <code>feature-branch</code> and switches to it.</p>"},{"location":"checkout/#checking-out-a-specific-commit","title":"Checking Out a Specific Commit","text":""},{"location":"checkout/#git-checkout-commit","title":"<code>git checkout &lt;commit&gt;</code>","text":"<p>Switches to a specific commit, putting the repository in a \"detached HEAD\" state.</p> <pre><code>git checkout &lt;commit&gt;\n</code></pre>"},{"location":"checkout/#example_2","title":"Example","text":"<pre><code>git checkout 1a2b3c4d\n</code></pre> <p>This command switches to the commit with the hash <code>1a2b3c4d</code>.</p>"},{"location":"checkout/#checking-out-a-file-from-a-specific-commit","title":"Checking Out a File from a Specific Commit","text":""},{"location":"checkout/#git-checkout-commit-file","title":"<code>git checkout &lt;commit&gt; -- &lt;file&gt;</code>","text":"<p>Restores a specific file from a particular commit to the working directory.</p> <pre><code>git checkout &lt;commit&gt; -- &lt;file&gt;\n</code></pre>"},{"location":"checkout/#example_3","title":"Example","text":"<pre><code>git checkout 1a2b3c4d -- README.md\n</code></pre> <p>This command restores the <code>README.md</code> file from the commit with the hash <code>1a2b3c4d</code> to the working directory.</p>"},{"location":"checkout/#discarding-changes-in-working-directory","title":"Discarding Changes in Working Directory","text":""},{"location":"checkout/#git-checkout-file","title":"<code>git checkout -- &lt;file&gt;</code>","text":"<p>Reverts changes in the working directory to match the HEAD commit.</p> <pre><code>git checkout -- &lt;file&gt;\n</code></pre>"},{"location":"checkout/#example_4","title":"Example","text":"<pre><code>git checkout -- README.md\n</code></pre> <p>This command discards changes in <code>README.md</code>, reverting it to the state of the last commit.</p>"},{"location":"checkout/#checking-out-a-branch-from-a-remote-repository","title":"Checking Out a Branch from a Remote Repository","text":""},{"location":"checkout/#git-checkout-b-new-branch-remotebranch","title":"<code>git checkout -b &lt;new-branch&gt; &lt;remote&gt;/&lt;branch&gt;</code>","text":"<p>Creates a new branch tracking a remote branch and switches to it.</p> <pre><code>git checkout -b &lt;new-branch&gt; &lt;remote&gt;/&lt;branch&gt;\n</code></pre>"},{"location":"checkout/#example_5","title":"Example","text":"<pre><code>git checkout -b feature-branch origin/feature-branch\n</code></pre> <p>This command creates a new branch named <code>feature-branch</code> tracking the <code>origin/feature-branch</code> remote branch and switches to it.</p>"},{"location":"checkout/#checking-out-a-specific-tag","title":"Checking Out a Specific Tag","text":""},{"location":"checkout/#git-checkout-tagstag","title":"<code>git checkout tags/&lt;tag&gt;</code>","text":"<p>Switches to a specific tag.</p> <pre><code>git checkout tags/&lt;tag&gt;\n</code></pre>"},{"location":"checkout/#example_6","title":"Example","text":"<pre><code>git checkout tags/v1.0.0\n</code></pre> <p>This command switches to the <code>v1.0.0</code> tag.</p>"},{"location":"checkout/#undoing-a-checkout","title":"Undoing a Checkout","text":""},{"location":"checkout/#git-checkout-","title":"<code>git checkout -</code>","text":"<p>Switches back to the previous branch.</p> <pre><code>git checkout -\n</code></pre>"},{"location":"checkout/#example_7","title":"Example","text":"<pre><code>git checkout -\n</code></pre> <p>This command switches back to the branch you were previously on.</p>"},{"location":"checkout/#summary","title":"Summary","text":"<p>The <code>git checkout</code> command is versatile and can be used to switch branches, create new branches, check out specific commits, and restore files. It is an essential command for navigating and managing your Git repository. For more detailed information on each command, refer to the official Git documentation.</p>"},{"location":"checkout_sparse/","title":"Git Sparse Checkout Commands","text":""},{"location":"checkout_sparse/#overview","title":"Overview","text":"<p>The <code>git sparse-checkout</code> command allows you to check out only a subset of the files in a repository. This can be useful for working with large repositories where you only need to work on a small portion of the project. This document covers the basic and advanced usage of <code>git sparse-checkout</code>.</p>"},{"location":"checkout_sparse/#enabling-sparse-checkout","title":"Enabling Sparse Checkout","text":""},{"location":"checkout_sparse/#git-sparse-checkout-init","title":"<code>git sparse-checkout init</code>","text":"<p>Initializes sparse checkout in the repository.</p> <pre><code>git sparse-checkout init\n</code></pre>"},{"location":"checkout_sparse/#example","title":"Example","text":"<pre><code>git sparse-checkout init\n</code></pre> <p>This command initializes sparse checkout, setting up the repository to allow sparse checkouts.</p>"},{"location":"checkout_sparse/#defining-sparse-checkout-patterns","title":"Defining Sparse Checkout Patterns","text":""},{"location":"checkout_sparse/#git-sparse-checkout-set-pattern-pattern","title":"<code>git sparse-checkout set &lt;pattern&gt; [&lt;pattern&gt; ...]</code>","text":"<p>Sets the sparse checkout patterns to include the specified paths.</p> <pre><code>git sparse-checkout set &lt;pattern&gt; [&lt;pattern&gt; ...]\n</code></pre>"},{"location":"checkout_sparse/#example_1","title":"Example","text":"<pre><code>git sparse-checkout set src/ docs/\n</code></pre> <p>This command sets the sparse checkout to include only the <code>src/</code> and <code>docs/</code> directories.</p>"},{"location":"checkout_sparse/#git-sparse-checkout-add-pattern-pattern","title":"<code>git sparse-checkout add &lt;pattern&gt; [&lt;pattern&gt; ...]</code>","text":"<p>Adds additional patterns to the sparse checkout list without removing existing ones.</p> <pre><code>git sparse-checkout add &lt;pattern&gt; [&lt;pattern&gt; ...]\n</code></pre>"},{"location":"checkout_sparse/#example_2","title":"Example","text":"<pre><code>git sparse-checkout add test/\n</code></pre> <p>This command adds the <code>test/</code> directory to the existing sparse checkout patterns.</p>"},{"location":"checkout_sparse/#removing-sparse-checkout-patterns","title":"Removing Sparse Checkout Patterns","text":""},{"location":"checkout_sparse/#git-sparse-checkout-remove-pattern-pattern","title":"<code>git sparse-checkout remove &lt;pattern&gt; [&lt;pattern&gt; ...]</code>","text":"<p>Removes specified patterns from the sparse checkout list.</p> <pre><code>git sparse-checkout remove &lt;pattern&gt; [&lt;pattern&gt; ...]\n</code></pre>"},{"location":"checkout_sparse/#example_3","title":"Example","text":"<pre><code>git sparse-checkout remove docs/\n</code></pre> <p>This command removes the <code>docs/</code> directory from the sparse checkout patterns.</p>"},{"location":"checkout_sparse/#checking-sparse-checkout-patterns","title":"Checking Sparse Checkout Patterns","text":""},{"location":"checkout_sparse/#git-sparse-checkout-list","title":"<code>git sparse-checkout list</code>","text":"<p>Lists the current sparse checkout patterns.</p> <pre><code>git sparse-checkout list\n</code></pre>"},{"location":"checkout_sparse/#example_4","title":"Example","text":"<pre><code>git sparse-checkout list\n</code></pre> <p>This command lists all the patterns currently included in the sparse checkout.</p>"},{"location":"checkout_sparse/#using-cone-mode","title":"Using Cone Mode","text":""},{"location":"checkout_sparse/#git-sparse-checkout-init-cone","title":"<code>git sparse-checkout init --cone</code>","text":"<p>Initializes sparse checkout in \"cone mode,\" which uses simplified and more efficient pattern matching.</p> <pre><code>git sparse-checkout init --cone\n</code></pre>"},{"location":"checkout_sparse/#example_5","title":"Example","text":"<pre><code>git sparse-checkout init --cone\n</code></pre> <p>This command initializes sparse checkout in cone mode for more efficient pattern matching.</p>"},{"location":"checkout_sparse/#git-sparse-checkout-set-cone-directory-directory","title":"<code>git sparse-checkout set --cone &lt;directory&gt; [&lt;directory&gt; ...]</code>","text":"<p>Sets sparse checkout patterns in cone mode, including only the specified directories.</p> <pre><code>git sparse-checkout set --cone &lt;directory&gt; [&lt;directory&gt; ...]\n</code></pre>"},{"location":"checkout_sparse/#example_6","title":"Example","text":"<pre><code>git sparse-checkout set --cone src/ docs/\n</code></pre> <p>This command sets the sparse checkout to include only the <code>src/</code> and <code>docs/</code> directories using cone mode.</p>"},{"location":"checkout_sparse/#disabling-sparse-checkout","title":"Disabling Sparse Checkout","text":""},{"location":"checkout_sparse/#git-sparse-checkout-disable","title":"<code>git sparse-checkout disable</code>","text":"<p>Disables sparse checkout, making all files in the repository available.</p> <pre><code>git sparse-checkout disable\n</code></pre>"},{"location":"checkout_sparse/#example_7","title":"Example","text":"<pre><code>git sparse-checkout disable\n</code></pre> <p>This command disables sparse checkout and makes all files in the repository available.</p>"},{"location":"checkout_sparse/#summary","title":"Summary","text":"<p>The <code>git sparse-checkout</code> command is a powerful tool for managing large repositories by allowing you to check out only the files you need. This can improve performance and reduce clutter in your working directory. For more detailed information on each command, refer to the official Git documentation.</p>"},{"location":"cherrypick/","title":"Git Cherry-Pick Tutorial","text":""},{"location":"cherrypick/#overview","title":"Overview","text":"<p>Git cherry-pick allows you to apply changes from a specific commit onto your current branch. This is useful when you want to introduce specific changes from one branch into another without merging the entire branch. This document covers the basics of using git cherry-pick with examples.</p>"},{"location":"cherrypick/#what-is-git-cherry-pick","title":"What is Git Cherry-Pick?","text":"<p>Git cherry-pick allows you to select specific commits from one branch and apply them to another branch. This can be useful for hotfixes or for applying a particular feature to multiple branches without merging the entire branch.</p>"},{"location":"cherrypick/#basic-cherry-pick-usage","title":"Basic Cherry-Pick Usage","text":"<p>To cherry-pick a commit, you need the commit hash of the commit you want to apply to your current branch.</p>"},{"location":"cherrypick/#example","title":"Example","text":"<ol> <li> <p>Check out the branch you want to apply the commit to:</p> <pre><code>git checkout main\n</code></pre> </li> <li> <p>Use the cherry-pick command with the commit hash:</p> <pre><code>git cherry-pick &lt;commit-hash&gt;\n</code></pre> </li> </ol>"},{"location":"cherrypick/#example_1","title":"Example","text":"<pre><code>git cherry-pick abc1234\n</code></pre> <p>This will apply the changes from commit <code>abc1234</code> to the <code>main</code> branch.</p>"},{"location":"cherrypick/#cherry-picking-multiple-commits","title":"Cherry-Picking Multiple Commits","text":"<p>You can cherry-pick multiple commits by providing a range of commits or a list of commit hashes.</p>"},{"location":"cherrypick/#example-cherry-picking-a-range-of-commits","title":"Example: Cherry-Picking a Range of Commits","text":"<ol> <li> <p>Check out the branch you want to apply the commits to:</p> <pre><code>git checkout main\n</code></pre> </li> <li> <p>Use the cherry-pick command with a commit range:</p> <pre><code>git cherry-pick &lt;start-commit-hash&gt;^..&lt;end-commit-hash&gt;\n</code></pre> </li> </ol>"},{"location":"cherrypick/#example_2","title":"Example","text":"<pre><code>git cherry-pick abc1234^..def5678\n</code></pre> <p>This will apply the changes from all commits between <code>abc1234</code> and <code>def5678</code> (inclusive) to the <code>main</code> branch.</p>"},{"location":"cherrypick/#example-cherry-picking-a-list-of-commits","title":"Example: Cherry-Picking a List of Commits","text":"<ol> <li> <p>Check out the branch you want to apply the commits to:</p> <pre><code>git checkout main\n</code></pre> </li> <li> <p>Use the cherry-pick command with a list of commit hashes:</p> <pre><code>git cherry-pick &lt;commit-hash1&gt; &lt;commit-hash2&gt; &lt;commit-hash3&gt;\n</code></pre> </li> </ol>"},{"location":"cherrypick/#example_3","title":"Example","text":"<pre><code>git cherry-pick abc1234 def5678 ghi9101\n</code></pre> <p>This will apply the changes from commits <code>abc1234</code>, <code>def5678</code>, and <code>ghi9101</code> to the <code>main</code> branch.</p>"},{"location":"cherrypick/#handling-conflicts-during-cherry-pick","title":"Handling Conflicts During Cherry-Pick","text":"<p>Conflicts can arise during a cherry-pick if the changes in the commit(s) being applied conflict with changes in the current branch.</p>"},{"location":"cherrypick/#example_4","title":"Example","text":"<ol> <li> <p>Cherry-pick a commit that results in a conflict:</p> <pre><code>git cherry-pick abc1234\n</code></pre> </li> <li> <p>Git will notify you of conflicts. Resolve the conflicts in the affected files.</p> </li> <li> <p>After resolving the conflicts, add the resolved files:</p> <pre><code>git add &lt;resolved-file&gt;\n</code></pre> </li> <li> <p>Continue the cherry-pick process:</p> <pre><code>git cherry-pick --continue\n</code></pre> </li> </ol>"},{"location":"cherrypick/#abort-or-continue-a-cherry-pick","title":"Abort or Continue a Cherry-Pick","text":""},{"location":"cherrypick/#abort-a-cherry-pick","title":"Abort a Cherry-Pick","text":"<p>To abort an ongoing cherry-pick operation:</p> <pre><code>git cherry-pick --abort\n</code></pre> <p>This will stop the cherry-pick process and revert any changes made by the cherry-pick.</p>"},{"location":"cherrypick/#continue-a-cherry-pick","title":"Continue a Cherry-Pick","text":"<p>If you have resolved conflicts and want to continue the cherry-pick process:</p> <pre><code>git cherry-pick --continue\n</code></pre>"},{"location":"cherrypick/#useful-tips","title":"Useful Tips","text":"<ul> <li> <p>Cherry-Pick from Other Branches: You can cherry-pick commits from any branch by specifying the branch name before the commit hash.</p> <pre><code>git cherry-pick feature-branch abc1234\n</code></pre> </li> <li> <p>Cherry-Pick with a Message: You can edit the commit message during a cherry-pick by using the <code>-x</code> option.</p> <pre><code>git cherry-pick -x abc1234\n</code></pre> <p>This will add a reference to the original commit in the commit message.</p> </li> </ul>"},{"location":"cherrypick/#summary","title":"Summary","text":"<p>Git cherry-pick is a powerful tool for applying specific commits from one branch to another. By understanding how to use cherry-pick for single or multiple commits, handle conflicts, and manage the process, you can effectively incorporate necessary changes into your branches without merging entire branches.</p>"},{"location":"clean/","title":"Git Clean Tutorial","text":""},{"location":"clean/#overview","title":"Overview","text":"<p>The <code>git clean</code> command is used to remove untracked files and directories from your working directory. This can be useful for cleaning up your working directory by removing files that are not under version control. This document covers the basics of using <code>git clean</code> with examples.</p>"},{"location":"clean/#what-is-git-clean","title":"What is Git Clean?","text":"<p>The <code>git clean</code> command is used to remove untracked files and directories from your working directory. Untracked files are files that are not added to the Git index and are not being tracked by Git. This command is helpful for cleaning up your working directory and ensuring that it only contains files that are part of your project.</p>"},{"location":"clean/#basic-usage","title":"Basic Usage","text":"<p>The basic usage of <code>git clean</code> is to remove untracked files from your working directory. By default, <code>git clean</code> will not remove any files unless you specify the <code>-f</code> or <code>--force</code> option.</p>"},{"location":"clean/#example","title":"Example","text":"<pre><code>git clean -f\n</code></pre> <p>This will remove all untracked files from your working directory.</p>"},{"location":"clean/#dry-run","title":"Dry Run","text":"<p>Before actually removing files, you can perform a dry run to see which files would be removed without actually deleting them. This is done using the <code>-n</code> or <code>--dry-run</code> option.</p>"},{"location":"clean/#example_1","title":"Example","text":"<pre><code>git clean -n\n</code></pre> <p>This will list all untracked files that would be removed, but it will not actually delete them.</p>"},{"location":"clean/#force-clean","title":"Force Clean","text":"<p>To forcefully remove untracked files, use the <code>-f</code> or <code>--force</code> option.</p>"},{"location":"clean/#example_2","title":"Example","text":"<pre><code>git clean -f\n</code></pre> <p>This will remove all untracked files from your working directory.</p>"},{"location":"clean/#remove-untracked-directories","title":"Remove Untracked Directories","text":"<p>To remove untracked directories in addition to untracked files, use the <code>-d</code> option.</p>"},{"location":"clean/#example_3","title":"Example","text":"<pre><code>git clean -fd\n</code></pre> <p>This will remove all untracked files and directories from your working directory.</p>"},{"location":"clean/#interactive-mode","title":"Interactive Mode","text":"<p>Interactive mode allows you to review and approve each file or directory before it is removed. This is done using the <code>-i</code> or <code>--interactive</code> option.</p>"},{"location":"clean/#example_4","title":"Example","text":"<pre><code>git clean -i\n</code></pre> <p>This will prompt you to confirm each file and directory before it is removed.</p>"},{"location":"clean/#useful-tips","title":"Useful Tips","text":"<ul> <li>Combine Options: You can combine multiple options to customize the behavior of <code>git clean</code>. For example, to perform a dry run and include directories, use <code>git clean -nd</code>.</li> <li>Be Cautious: The <code>git clean</code> command is powerful and can permanently delete files. Always perform a dry run first if you are unsure about which files will be removed.</li> <li>Exclude Files: You can exclude certain files from being removed by creating a <code>.gitignore</code> file and listing the files or directories to be ignored.</li> </ul>"},{"location":"clean/#summary","title":"Summary","text":"<p>The <code>git clean</code> command is a powerful tool for removing untracked files and directories from your working directory. By using options such as <code>-n</code> for a dry run, <code>-f</code> to force removal, <code>-d</code> to include directories, and <code>-i</code> for interactive mode, you can effectively manage and clean your working directory. Always exercise caution when using this command to avoid accidentally deleting important files.</p>"},{"location":"clone/","title":"Git Clone Commands","text":""},{"location":"clone/#overview","title":"Overview","text":"<p>The <code>git clone</code> command is used to create a copy of an existing Git repository. It is commonly used to obtain a working copy of a repository hosted on a remote server. This document covers the basic and advanced usage of <code>git clone</code>.</p>"},{"location":"clone/#basic-clone","title":"Basic Clone","text":""},{"location":"clone/#git-clone-repository","title":"<code>git clone &lt;repository&gt;</code>","text":"<p>Clones a repository from the specified URL.</p> <pre><code>git clone &lt;repository&gt;\n</code></pre>"},{"location":"clone/#example","title":"Example","text":"<pre><code>git clone https://github.com/example/repo.git\n</code></pre> <p>This command clones the repository from the given URL into a directory named <code>repo</code>.</p>"},{"location":"clone/#cloning-into-a-specific-directory","title":"Cloning into a Specific Directory","text":""},{"location":"clone/#git-clone-repository-directory","title":"<code>git clone &lt;repository&gt; &lt;directory&gt;</code>","text":"<p>Clones a repository into the specified directory.</p> <pre><code>git clone &lt;repository&gt; &lt;directory&gt;\n</code></pre>"},{"location":"clone/#example_1","title":"Example","text":"<pre><code>git clone https://github.com/example/repo.git my-repo\n</code></pre> <p>This command clones the repository into a directory named <code>my-repo</code>.</p>"},{"location":"clone/#cloning-with-specific-branch","title":"Cloning with Specific Branch","text":""},{"location":"clone/#git-clone-b-branch-repository","title":"<code>git clone -b &lt;branch&gt; &lt;repository&gt;</code>","text":"<p>Clones a repository and checks out the specified branch.</p> <pre><code>git clone -b &lt;branch&gt; &lt;repository&gt;\n</code></pre>"},{"location":"clone/#example_2","title":"Example","text":"<pre><code>git clone -b feature-branch https://github.com/example/repo.git\n</code></pre> <p>This command clones the repository and checks out the <code>feature-branch</code> branch.</p>"},{"location":"clone/#cloning-with-depth-shallow-clone","title":"Cloning with Depth (Shallow Clone)","text":""},{"location":"clone/#git-clone-depth-depth-repository","title":"<code>git clone --depth &lt;depth&gt; &lt;repository&gt;</code>","text":"<p>Creates a shallow clone with a history truncated to the specified number of commits.</p> <pre><code>git clone --depth &lt;depth&gt; &lt;repository&gt;\n</code></pre>"},{"location":"clone/#example_3","title":"Example","text":"<pre><code>git clone --depth 1 https://github.com/example/repo.git\n</code></pre> <p>This command clones the repository with a history truncated to the most recent commit.</p>"},{"location":"clone/#cloning-with-ssh","title":"Cloning with SSH","text":""},{"location":"clone/#git-clone-sshrepository","title":"<code>git clone &lt;ssh://repository&gt;</code>","text":"<p>Clones a repository using the SSH protocol.</p> <pre><code>git clone &lt;ssh://repository&gt;\n</code></pre>"},{"location":"clone/#example_4","title":"Example","text":"<pre><code>git clone git@github.com:example/repo.git\n</code></pre> <p>This command clones the repository using SSH authentication.</p>"},{"location":"clone/#cloning-a-submodule","title":"Cloning a Submodule","text":""},{"location":"clone/#git-clone-recurse-submodules-repository","title":"<code>git clone --recurse-submodules &lt;repository&gt;</code>","text":"<p>Clones a repository and initializes and updates any submodules.</p> <pre><code>git clone --recurse-submodules &lt;repository&gt;\n</code></pre>"},{"location":"clone/#example_5","title":"Example","text":"<pre><code>git clone --recurse-submodules https://github.com/example/repo.git\n</code></pre> <p>This command clones the repository and ensures all submodules are initialized and updated.</p>"},{"location":"clone/#cloning-with-configuration","title":"Cloning with Configuration","text":""},{"location":"clone/#git-clone-c-configvalue-repository","title":"<code>git clone -c &lt;config&gt;=&lt;value&gt; &lt;repository&gt;</code>","text":"<p>Sets configuration values during the clone operation.</p> <pre><code>git clone -c &lt;config&gt;=&lt;value&gt; &lt;repository&gt;\n</code></pre>"},{"location":"clone/#example_6","title":"Example","text":"<pre><code>git clone -c core.autocrlf=input https://github.com/example/repo.git\n</code></pre> <p>This command clones the repository and sets the <code>core.autocrlf</code> configuration to <code>input</code> during the clone.</p>"},{"location":"clone/#summary","title":"Summary","text":"<p>The <code>git clone</code> command is used to create a copy of an existing repository, with options to specify the directory, branch, depth, and more. It is essential for starting work on an existing project or contributing to an open-source project. For more detailed information on each command, refer to the official Git documentation.</p>"},{"location":"commit/","title":"Git Commit Commands","text":""},{"location":"commit/#overview","title":"Overview","text":"<p>The <code>git commit</code> command is used to save changes to the local repository. It records changes to the repository's history with a message describing the changes. This document covers the basic and advanced usage of <code>git commit</code>.</p>"},{"location":"commit/#basic-commit","title":"Basic Commit","text":""},{"location":"commit/#git-commit-m-message","title":"<code>git commit -m \"&lt;message&gt;\"</code>","text":"<p>Commits the staged changes with a message describing the changes.</p> <pre><code>git commit -m \"&lt;message&gt;\"\n</code></pre>"},{"location":"commit/#example","title":"Example","text":"<pre><code>git add .\ngit commit -m \"Add new feature to the project\"\n</code></pre> <p>This command commits all staged changes with the message \"Add new feature to the project.\"</p>"},{"location":"commit/#commit-with-a-detailed-message","title":"Commit with a Detailed Message","text":""},{"location":"commit/#git-commit","title":"<code>git commit</code>","text":"<p>Opens the default text editor to write a detailed commit message.</p> <pre><code>git commit\n</code></pre>"},{"location":"commit/#example_1","title":"Example","text":"<pre><code>git add .\ngit commit\n</code></pre> <p>This command opens the text editor for you to write a more detailed commit message.</p>"},{"location":"commit/#commit-only-specific-files","title":"Commit Only Specific Files","text":""},{"location":"commit/#git-commit-file-m-message","title":"<code>git commit &lt;file&gt; -m \"&lt;message&gt;\"</code>","text":"<p>Commits only the specified file with a message describing the changes.</p> <pre><code>git commit &lt;file&gt; -m \"&lt;message&gt;\"\n</code></pre>"},{"location":"commit/#example_2","title":"Example","text":"<pre><code>git commit src/main.py -m \"Fix bug in main.py\"\n</code></pre> <p>This command commits only <code>src/main.py</code> with the message \"Fix bug in main.py.\"</p>"},{"location":"commit/#amend-the-last-commit","title":"Amend the Last Commit","text":""},{"location":"commit/#git-commit-amend","title":"<code>git commit --amend</code>","text":"<p>Modifies the last commit. You can add new changes or update the commit message.</p> <pre><code>git commit --amend\n</code></pre>"},{"location":"commit/#example_3","title":"Example","text":"<pre><code># Make additional changes\ngit add src/main.py\ngit commit --amend\n</code></pre> <p>This command allows you to modify the last commit, either by adding new changes or changing the commit message.</p>"},{"location":"commit/#commit-with-a-specific-author","title":"Commit with a Specific Author","text":""},{"location":"commit/#git-commit-authorname-email-m-message","title":"<code>git commit --author=\"Name &lt;email&gt;\" -m \"&lt;message&gt;\"</code>","text":"<p>Commits with a specified author name and email.</p> <pre><code>git commit --author=\"Name &lt;email&gt;\" -m \"&lt;message&gt;\"\n</code></pre>"},{"location":"commit/#example_4","title":"Example","text":"<pre><code>git commit --author=\"John Doe &lt;john@example.com&gt;\" -m \"Update documentation\"\n</code></pre> <p>This command commits with the author information provided, which can be different from the global Git configuration.</p>"},{"location":"commit/#skip-the-staging-area","title":"Skip the Staging Area","text":""},{"location":"commit/#git-commit-a-m-message","title":"<code>git commit -a -m \"&lt;message&gt;\"</code>","text":"<p>Commits all changes in tracked files, skipping the staging area.</p> <pre><code>git commit -a -m \"&lt;message&gt;\"\n</code></pre>"},{"location":"commit/#example_5","title":"Example","text":"<pre><code>git commit -a -m \"Automatically commit all changes\"\n</code></pre> <p>This command commits all tracked changes without having to explicitly use <code>git add</code>.</p>"},{"location":"commit/#commit-with-a-gpg-signature","title":"Commit with a GPG Signature","text":""},{"location":"commit/#git-commit-s-m-message","title":"<code>git commit -S -m \"&lt;message&gt;\"</code>","text":"<p>Commits the changes with a GPG signature, verifying the commit's authenticity.</p> <pre><code>git commit -S -m \"&lt;message&gt;\"\n</code></pre>"},{"location":"commit/#example_6","title":"Example","text":"<pre><code>git commit -S -m \"Signed commit with GPG key\"\n</code></pre> <p>This command signs the commit with your GPG key, providing an additional layer of verification.</p>"},{"location":"commit/#summary","title":"Summary","text":"<p>The <code>git commit</code> command is essential for recording changes in the Git repository. It allows you to provide descriptive messages, amend previous commits, and perform commits with specific author information or signatures. For more detailed information on each command, refer to the official Git documentation.</p>"},{"location":"configuration/","title":"Git Configuration Commands","text":""},{"location":"configuration/#overview","title":"Overview","text":"<p>Git allows you to customize your settings by using configuration commands. These commands can be used to set user information, preferences, and other configurations that help tailor Git to your workflow.</p>"},{"location":"configuration/#setting-user-information","title":"Setting User Information","text":""},{"location":"configuration/#git-config-global-username","title":"<code>git config --global user.name</code>","text":"<p>Sets the name you want attached to your commit transactions.</p> <pre><code>git config --global user.name \"Your Name\"\n</code></pre>"},{"location":"configuration/#example","title":"Example","text":"<pre><code>git config --global user.name \"Jane Doe\"\n</code></pre> <p>This command sets your name to \"Jane Doe\" for all repositories on your machine.</p>"},{"location":"configuration/#git-config-global-useremail","title":"<code>git config --global user.email</code>","text":"<p>Sets the email you want attached to your commit transactions.</p> <pre><code>git config --global user.email \"your.email@example.com\"\n</code></pre>"},{"location":"configuration/#example_1","title":"Example","text":"<pre><code>git config --global user.email \"jane.doe@example.com\"\n</code></pre> <p>This command sets your email to \"jane.doe@example.com\" for all repositories on your machine.</p>"},{"location":"configuration/#setting-editor","title":"Setting Editor","text":""},{"location":"configuration/#git-config-global-coreeditor","title":"<code>git config --global core.editor</code>","text":"<p>Sets the default text editor that Git will use when you need to enter a commit message.</p> <pre><code>git config --global core.editor \"editor\"\n</code></pre>"},{"location":"configuration/#example_2","title":"Example","text":"<pre><code>git config --global core.editor \"code --wait\"\n</code></pre> <p>This command sets Visual Studio Code as the default editor for Git.</p>"},{"location":"configuration/#setting-default-branch-name","title":"Setting Default Branch Name","text":""},{"location":"configuration/#git-config-global-initdefaultbranch","title":"<code>git config --global init.defaultBranch</code>","text":"<p>Sets the name of the initial branch created when you run <code>git init</code>.</p> <pre><code>git config --global init.defaultBranch main\n</code></pre>"},{"location":"configuration/#example_3","title":"Example","text":"<pre><code>git config --global init.defaultBranch main\n</code></pre> <p>This command sets the default branch name to <code>main</code> for all new repositories.</p>"},{"location":"configuration/#aliases","title":"Aliases","text":""},{"location":"configuration/#git-config-global-aliasalias-name","title":"<code>git config --global alias.&lt;alias-name&gt;</code>","text":"<p>Creates shortcuts for Git commands.</p> <pre><code>git config --global alias.st status\n</code></pre>"},{"location":"configuration/#example_4","title":"Example","text":"<pre><code>git config --global alias.co checkout\ngit config --global alias.br branch\ngit config --global alias.ci commit\n</code></pre> <p>These commands create aliases so you can use <code>git co</code> instead of <code>git checkout</code>, <code>git br</code> instead of <code>git branch</code>, and <code>git ci</code> instead of <code>git commit</code>.</p>"},{"location":"configuration/#viewing-configuration","title":"Viewing Configuration","text":""},{"location":"configuration/#git-config-list","title":"<code>git config --list</code>","text":"<p>Displays the current configuration settings.</p> <pre><code>git config --list\n</code></pre>"},{"location":"configuration/#example_5","title":"Example","text":"<pre><code>git config --list\n</code></pre> <p>This command lists all Git configuration settings currently in use.</p>"},{"location":"configuration/#git-config-key","title":"<code>git config &lt;key&gt;</code>","text":"<p>Displays the value for a specific configuration key.</p> <pre><code>git config &lt;key&gt;\n</code></pre>"},{"location":"configuration/#example_6","title":"Example","text":"<pre><code>git config user.name\n</code></pre> <p>This command shows the current setting for <code>user.name</code>.</p>"},{"location":"configuration/#unsetting-configuration","title":"Unsetting Configuration","text":""},{"location":"configuration/#git-config-global-unset-key","title":"<code>git config --global --unset &lt;key&gt;</code>","text":"<p>Removes a configuration setting.</p> <pre><code>git config --global --unset &lt;key&gt;\n</code></pre>"},{"location":"configuration/#example_7","title":"Example","text":"<pre><code>git config --global --unset user.name\n</code></pre> <p>This command removes the global setting for <code>user.name</code>.</p>"},{"location":"configuration/#system-global-and-local-configuration","title":"System, Global, and Local Configuration","text":"<p>Git configuration levels:</p> <ul> <li>System: Applies to every user on the system and all their repositories.</li> <li>Global: Applies to all of your repositories on your system.</li> <li>Local: Applies to the specific repository you are currently working in.</li> </ul> <p>You can specify the level by using the <code>--system</code>, <code>--global</code>, or <code>--local</code> options:</p> <pre><code>git config --system &lt;key&gt; &lt;value&gt;\ngit config --global &lt;key&gt; &lt;value&gt;\ngit config --local &lt;key&gt; &lt;value&gt;\n</code></pre>"},{"location":"configuration/#example_8","title":"Example","text":"<pre><code>git config --local core.ignorecase false\n</code></pre> <p>This command sets the <code>core.ignorecase</code> setting to <code>false</code> for the current repository.</p>"},{"location":"configuration/#summary","title":"Summary","text":"<p>These Git configuration commands help you customize your Git environment to match your preferences and workflow. For more detailed information on each command, refer to the official Git documentation.</p>"},{"location":"conflicts/","title":"Git Conflicts Tutorial","text":""},{"location":"conflicts/#overview","title":"Overview","text":"<p>Git conflicts occur when changes in different branches or commits cannot be automatically merged by Git. This typically happens when there are competing changes to the same lines in a file. Resolving conflicts is a critical part of collaborative development and ensures that all changes are integrated correctly.</p>"},{"location":"conflicts/#what-is-a-git-conflict","title":"What is a Git Conflict?","text":"<p>A Git conflict arises when Git encounters changes in different branches or commits that cannot be automatically reconciled. Conflicts occur during merge, rebase, or cherry-pick operations when changes to the same lines or files are made in different commits.</p>"},{"location":"conflicts/#how-conflicts-occur","title":"How Conflicts Occur","text":"<p>Conflicts typically occur in the following scenarios:</p> <ul> <li>Merge Conflicts: When merging branches with competing changes to the same lines or files.</li> <li>Rebase Conflicts: When rebasing a branch onto another branch with conflicting changes.</li> <li>Cherry-Pick Conflicts: When cherry-picking commits that have conflicts with the current branch.</li> </ul>"},{"location":"conflicts/#identifying-conflicts","title":"Identifying Conflicts","text":"<p>When a conflict occurs, Git will:</p> <ol> <li>Mark Conflicted Files: Git marks the conflicted files with conflict markers.</li> <li>Notify the User: Git will display messages in the terminal indicating the files with conflicts.</li> </ol>"},{"location":"conflicts/#example-conflict-markers-in-a-file","title":"Example: Conflict Markers in a File","text":"<p>A file with conflicts will contain markers like:</p> <pre><code>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD\nYour changes here\n=======\nChanges from the branch being merged\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; branch-to-merge\n</code></pre> <ul> <li><code>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</code>: The changes in your current branch.</li> <li><code>=======</code>: The dividing line between conflicting changes.</li> <li><code>&gt;&gt;&gt;&gt;&gt;&gt;&gt; branch-to-merge</code>: The changes from the branch being merged.</li> </ul>"},{"location":"conflicts/#resolving-conflicts","title":"Resolving Conflicts","text":"<p>To resolve conflicts:</p> <ol> <li>Open Conflicted Files: Edit the files to resolve the conflicts by removing the conflict markers and merging the changes manually.</li> <li>Add the Resolved Files: Use <code>git add</code> to mark the conflicts as resolved.</li> <li>Complete the Merge/Rebase: Commit the resolved changes.</li> </ol>"},{"location":"conflicts/#steps-to-resolve-conflicts","title":"Steps to Resolve Conflicts","text":"<ol> <li> <p>Edit the Conflicted Files:</p> <p>Open the file(s) with conflicts in your text editor and manually resolve the differences. For example:</p> <pre><code>// Before resolving:\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD\nYour changes here\n=======\nChanges from the branch being merged\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; branch-to-merge\n\n// After resolving:\nCombined changes that should be kept\n</code></pre> </li> <li> <p>Mark as Resolved:</p> <p>After editing the files, use:</p> <pre><code>git add &lt;file&gt;\n</code></pre> </li> <li> <p>Commit the Changes:</p> <p>Complete the merge or rebase by committing the resolved changes:</p> <pre><code>git commit\n</code></pre> <p>For rebases, continue the rebase process with:</p> <pre><code>git rebase --continue\n</code></pre> </li> </ol>"},{"location":"conflicts/#examples-of-conflict-resolution","title":"Examples of Conflict Resolution","text":""},{"location":"conflicts/#example-1-resolving-a-merge-conflict","title":"Example 1: Resolving a Merge Conflict","text":"<ol> <li> <p>Merge Branches:</p> <pre><code>git merge &lt;branch-to-merge&gt;\n</code></pre> </li> <li> <p>Resolve Conflicts in Files:</p> <p>Edit conflicted files and remove conflict markers.</p> </li> <li> <p>Add and Commit:</p> <pre><code>git add &lt;resolved-file&gt;\ngit commit -m \"Resolved merge conflict\"\n</code></pre> </li> </ol>"},{"location":"conflicts/#example-2-resolving-a-rebase-conflict","title":"Example 2: Resolving a Rebase Conflict","text":"<ol> <li> <p>Rebase Branch:</p> <pre><code>git rebase &lt;base-branch&gt;\n</code></pre> </li> <li> <p>Resolve Conflicts in Files:</p> <p>Edit conflicted files and remove conflict markers.</p> </li> <li> <p>Add and Continue Rebase:</p> <pre><code>git add &lt;resolved-file&gt;\ngit rebase --continue\n</code></pre> </li> </ol>"},{"location":"conflicts/#example-3-resolving-a-cherry-pick-conflict","title":"Example 3: Resolving a Cherry-Pick Conflict","text":"<ol> <li> <p>Cherry-Pick Commit:</p> <pre><code>git cherry-pick &lt;commit-hash&gt;\n</code></pre> </li> <li> <p>Resolve Conflicts in Files:</p> <p>Edit conflicted files and remove conflict markers.</p> </li> <li> <p>Add and Commit:</p> <pre><code>git add &lt;resolved-file&gt;\ngit cherry-pick --continue\n</code></pre> </li> </ol>"},{"location":"conflicts/#common-use-cases","title":"Common Use Cases","text":"<ul> <li>Merging Feature Branches: Integrating feature branches into a main branch where conflicts may arise.</li> <li>Rebasing Updates: Updating a feature branch with the latest changes from the main branch.</li> <li>Applying Commits: Cherry-picking specific commits from one branch to another with potential conflicts.</li> </ul>"},{"location":"conflicts/#summary","title":"Summary","text":"<p>Git conflicts occur when changes cannot be automatically merged due to competing modifications. Resolving conflicts involves manually editing files to reconcile differences, marking the conflicts as resolved, and completing the merge, rebase, or cherry-pick process. Understanding and effectively resolving conflicts is crucial for maintaining a smooth and collaborative development workflow.</p>"},{"location":"diff/","title":"Git Diff Tutorial","text":""},{"location":"diff/#overview","title":"Overview","text":"<p>The <code>git diff</code> command is used to show changes between commits, commit and working tree, etc. It is a versatile command that can compare branches, commits, and changes in the working directory. This document will cover various usages of <code>git diff</code> with examples.</p>"},{"location":"diff/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Basic Syntax</li> <li>Comparing Working Directory and Index</li> <li>Comparing Staged Changes</li> <li>Comparing Working Directory and Last Commit</li> <li>Comparing Between Commits</li> <li>Comparing Branches</li> <li>Diffing Specific Files</li> <li>Diffing with Different Output Formats</li> <li>Ignoring Whitespace Changes</li> <li>Useful Tips</li> </ol>"},{"location":"diff/#basic-syntax","title":"Basic Syntax","text":"<p>The basic syntax of <code>git diff</code> is:</p> <pre><code>git diff [options] [&lt;commit&gt;] [&lt;commit&gt;]\n</code></pre>"},{"location":"diff/#comparing-working-directory-and-index","title":"Comparing Working Directory and Index","text":"<p>To see the changes that you have made but not yet staged, use:</p> <pre><code>git diff\n</code></pre>"},{"location":"diff/#example","title":"Example","text":"<pre><code>git diff\n</code></pre> <p>This will show the changes in the working directory that are not staged for the next commit.</p>"},{"location":"diff/#comparing-staged-changes","title":"Comparing Staged Changes","text":"<p>To see the changes that are staged for the next commit, use:</p> <pre><code>git diff --cached\n</code></pre>"},{"location":"diff/#example_1","title":"Example","text":"<pre><code>git diff --cached\n</code></pre> <p>This will show the changes that have been staged but not yet committed.</p>"},{"location":"diff/#comparing-working-directory-and-last-commit","title":"Comparing Working Directory and Last Commit","text":"<p>To see the changes between the working directory and the last commit, use:</p> <pre><code>git diff HEAD\n</code></pre>"},{"location":"diff/#example_2","title":"Example","text":"<pre><code>git diff HEAD\n</code></pre> <p>This will show the changes in the working directory compared to the latest commit.</p>"},{"location":"diff/#comparing-between-commits","title":"Comparing Between Commits","text":"<p>To see the changes between two commits, use:</p> <pre><code>git diff &lt;commit1&gt; &lt;commit2&gt;\n</code></pre>"},{"location":"diff/#example_3","title":"Example","text":"<pre><code>git diff commit1 commit2\n</code></pre> <p>This will show the changes between <code>commit1</code> and <code>commit2</code>.</p>"},{"location":"diff/#comparing-branches","title":"Comparing Branches","text":"<p>To see the changes between two branches, use:</p> <pre><code>git diff &lt;branch1&gt; &lt;branch2&gt;\n</code></pre>"},{"location":"diff/#example_4","title":"Example","text":"<pre><code>git diff main feature-branch\n</code></pre> <p>This will show the differences between the <code>main</code> branch and the <code>feature-branch</code>.</p>"},{"location":"diff/#diffing-specific-files","title":"Diffing Specific Files","text":"<p>To see the changes for a specific file, use:</p> <pre><code>git diff &lt;file&gt;\n</code></pre>"},{"location":"diff/#example_5","title":"Example","text":"<pre><code>git diff README.md\n</code></pre> <p>This will show the changes in <code>README.md</code>.</p>"},{"location":"diff/#diffing-with-different-output-formats","title":"Diffing with Different Output Formats","text":"<p><code>git diff</code> supports different output formats. The most common are:</p> <ul> <li>Patch format (default): Shows the changes as a patch.</li> <li>Name-only format: Shows the names of the changed files.</li> <li>Name-status format: Shows the names and statuses (added, modified, deleted) of the changed files.</li> </ul>"},{"location":"diff/#examples","title":"Examples","text":""},{"location":"diff/#patch-format","title":"Patch Format","text":"<pre><code>git diff\n</code></pre>"},{"location":"diff/#name-only-format","title":"Name-Only Format","text":"<pre><code>git diff --name-only\n</code></pre>"},{"location":"diff/#name-status-format","title":"Name-Status Format","text":"<pre><code>git diff --name-status\n</code></pre>"},{"location":"diff/#ignoring-whitespace-changes","title":"Ignoring Whitespace Changes","text":"<p>To ignore whitespace changes, use:</p> <pre><code>git diff -w\n</code></pre>"},{"location":"diff/#example_6","title":"Example","text":"<pre><code>git diff -w\n</code></pre> <p>This will ignore whitespace changes in the diff output.</p>"},{"location":"diff/#useful-tips","title":"Useful Tips","text":"<ul> <li> <p>Color Diff Output: Use <code>--color</code> to force color diff output:</p> <pre><code>git diff --color\n</code></pre> </li> <li> <p>Word Diff: Use <code>--word-diff</code> to show changes word by word:</p> <pre><code>git diff --word-diff\n</code></pre> </li> <li> <p>Context Lines: Use <code>-U&lt;n&gt;</code> to show <code>&lt;n&gt;</code> lines of context around changes:</p> <pre><code>git diff -U3\n</code></pre> </li> </ul>"},{"location":"diff/#summary","title":"Summary","text":"<p>The <code>git diff</code> command is an essential tool for understanding changes in your Git repository. By using the various options and formats available, you can tailor the output to your needs and gain better insight into the differences between commits, branches, and your working directory.</p>"},{"location":"fetch/","title":"Git Fetch Commands","text":""},{"location":"fetch/#overview","title":"Overview","text":"<p>The <code>git fetch</code> command downloads objects and refs from another repository. This command is essential for updating your local repository with the latest changes from a remote repository without merging them into your local branch. This document covers the basic and advanced usage of <code>git fetch</code>.</p>"},{"location":"fetch/#basic-fetch","title":"Basic Fetch","text":""},{"location":"fetch/#git-fetch","title":"<code>git fetch</code>","text":"<p>Fetches updates from the default remote repository (usually <code>origin</code>).</p> <pre><code>git fetch\n</code></pre>"},{"location":"fetch/#example","title":"Example","text":"<pre><code>git fetch\n</code></pre> <p>This command fetches updates from the <code>origin</code> remote repository without merging them into your local branch.</p>"},{"location":"fetch/#git-fetch-remote","title":"<code>git fetch &lt;remote&gt;</code>","text":"<p>Fetches updates from a specific remote repository.</p> <pre><code>git fetch &lt;remote&gt;\n</code></pre>"},{"location":"fetch/#example_1","title":"Example","text":"<pre><code>git fetch origin\n</code></pre> <p>This command fetches updates from the <code>origin</code> remote repository.</p>"},{"location":"fetch/#fetching-specific-branches","title":"Fetching Specific Branches","text":""},{"location":"fetch/#git-fetch-remote-branch","title":"<code>git fetch &lt;remote&gt; &lt;branch&gt;</code>","text":"<p>Fetches updates from a specific branch of a remote repository.</p> <pre><code>git fetch &lt;remote&gt; &lt;branch&gt;\n</code></pre>"},{"location":"fetch/#example_2","title":"Example","text":"<pre><code>git fetch origin main\n</code></pre> <p>This command fetches updates from the <code>main</code> branch of the <code>origin</code> remote repository.</p>"},{"location":"fetch/#fetching-all-branches","title":"Fetching All Branches","text":""},{"location":"fetch/#git-fetch-all","title":"<code>git fetch --all</code>","text":"<p>Fetches updates from all configured remotes and their branches.</p> <pre><code>git fetch --all\n</code></pre>"},{"location":"fetch/#example_3","title":"Example","text":"<pre><code>git fetch --all\n</code></pre> <p>This command fetches updates from all remote repositories and their branches configured in your local repository.</p>"},{"location":"fetch/#pruning-deleted-branches","title":"Pruning Deleted Branches","text":""},{"location":"fetch/#git-fetch-prune","title":"<code>git fetch --prune</code>","text":"<p>Prunes (removes) tracking references that no longer exist on the remote.</p> <pre><code>git fetch --prune\n</code></pre>"},{"location":"fetch/#example_4","title":"Example","text":"<pre><code>git fetch --prune\n</code></pre> <p>This command removes any tracking branches that have been deleted on the remote repository.</p>"},{"location":"fetch/#fetching-tags","title":"Fetching Tags","text":""},{"location":"fetch/#git-fetch-tags","title":"<code>git fetch --tags</code>","text":"<p>Fetches all tags from the remote repository.</p> <pre><code>git fetch --tags\n</code></pre>"},{"location":"fetch/#example_5","title":"Example","text":"<pre><code>git fetch --tags\n</code></pre> <p>This command fetches all tags from the remote repository.</p>"},{"location":"fetch/#fetching-with-depth","title":"Fetching with Depth","text":""},{"location":"fetch/#git-fetch-depth-depth","title":"<code>git fetch --depth &lt;depth&gt;</code>","text":"<p>Fetches only the specified number of commits from the remote repository.</p> <pre><code>git fetch --depth &lt;depth&gt;\n</code></pre>"},{"location":"fetch/#example_6","title":"Example","text":"<pre><code>git fetch --depth 1\n</code></pre> <p>This command fetches only the latest commit from the remote repository.</p>"},{"location":"fetch/#specifying-refspecs","title":"Specifying Refspecs","text":""},{"location":"fetch/#git-fetch-remote-refspec","title":"<code>git fetch &lt;remote&gt; &lt;refspec&gt;</code>","text":"<p>Fetches a specific refspec from a remote repository.</p> <pre><code>git fetch &lt;remote&gt; &lt;refspec&gt;\n</code></pre>"},{"location":"fetch/#example_7","title":"Example","text":"<pre><code>git fetch origin refs/heads/main:refs/remotes/origin/main\n</code></pre> <p>This command fetches the <code>main</code> branch from the <code>origin</code> remote and updates the corresponding remote-tracking branch in your local repository.</p>"},{"location":"fetch/#fetching-all-remote-branches","title":"Fetching All Remote Branches","text":""},{"location":"fetch/#git-fetch-remote-refsheadsrefsremotesremote","title":"<code>git fetch &lt;remote&gt; +refs/heads/*:refs/remotes/&lt;remote&gt;/*</code>","text":"<p>Fetches all branches from a remote repository and updates the corresponding remote-tracking branches.</p> <pre><code>git fetch &lt;remote&gt; +refs/heads/*:refs/remotes/&lt;remote&gt;/*\n</code></pre>"},{"location":"fetch/#example_8","title":"Example","text":"<pre><code>git fetch origin +refs/heads/*:refs/remotes/origin/*\n</code></pre> <p>This command fetches all branches from the <code>origin</code> remote and updates the corresponding remote-tracking branches in your local repository.</p>"},{"location":"fetch/#fetch-and-merge","title":"Fetch and Merge","text":""},{"location":"fetch/#git-fetch-and-git-merge","title":"<code>git fetch</code> and <code>git merge</code>","text":"<p>Fetches changes from a remote repository and merges them into the current branch in two separate steps.</p> <pre><code>git fetch &lt;remote&gt;\ngit merge &lt;remote&gt;/&lt;branch&gt;\n</code></pre>"},{"location":"fetch/#example_9","title":"Example","text":"<pre><code>git fetch origin\ngit merge origin/main\n</code></pre> <p>This sequence of commands fetches changes from the <code>main</code> branch of the <code>origin</code> remote and merges them into the current branch.</p>"},{"location":"fetch/#summary","title":"Summary","text":"<p>The <code>git fetch</code> command is a powerful tool for updating your local repository with the latest changes from a remote repository without merging them immediately. This allows you to review changes before integrating them into your work. For more detailed information on each command, refer to the official Git documentation.</p>"},{"location":"filter/","title":"Git Filter Tutorial","text":""},{"location":"filter/#overview","title":"Overview","text":"<p><code>git filter</code> is a powerful command used to filter and rewrite Git history. This can be particularly useful for tasks such as removing sensitive information, modifying commit messages, or adjusting file structures. The primary tools for filtering in Git are <code>git filter-branch</code> and <code>git filter-repo</code>.</p>"},{"location":"filter/#what-is-git-filter","title":"What is Git Filter?","text":"<p>Git filtering tools are used to rewrite or filter the commit history of a Git repository. This allows you to modify commits, such as removing sensitive information, changing commit messages, or altering file paths.</p> <ul> <li><code>git filter-branch</code>: A legacy tool for filtering and rewriting Git history.</li> <li><code>git filter-repo</code>: A more recent and faster tool for filtering Git repositories, recommended for new projects.</li> </ul>"},{"location":"filter/#installing-git-filter-tools","title":"Installing Git Filter Tools","text":""},{"location":"filter/#installing-git-filter-repo","title":"Installing <code>git filter-repo</code>","text":"<ol> <li> <p>Install via Package Manager:</p> <ul> <li>macOS: </li> </ul> <pre><code>brew install git-filter-repo\n</code></pre> <ul> <li>Linux: </li> </ul> <pre><code>sudo apt-get install git-filter-repo\n</code></pre> </li> <li> <p>Install via Python Package:</p> <pre><code>pip install git-filter-repo\n</code></pre> </li> </ol>"},{"location":"filter/#installing-git-filter-branch","title":"Installing <code>git filter-branch</code>","text":"<p><code>git filter-branch</code> is included with Git, so no additional installation is required.</p>"},{"location":"filter/#using-git-filter-branch","title":"Using <code>git filter-branch</code>","text":"<p><code>git filter-branch</code> is used to rewrite history in a Git repository. Use it with caution, as it rewrites commit history, which can affect all clones of the repository.</p>"},{"location":"filter/#basic-syntax","title":"Basic Syntax","text":"<pre><code>git filter-branch --filter &lt;filter&gt; &lt;branch&gt;\n</code></pre>"},{"location":"filter/#example-removing-a-file-from-history","title":"Example: Removing a File from History","text":"<p>To remove a file from all commits:</p> <pre><code>git filter-branch --tree-filter 'rm -f path/to/file' HEAD\n</code></pre>"},{"location":"filter/#example-changing-author-information","title":"Example: Changing Author Information","text":"<p>To change author information in all commits:</p> <pre><code>git filter-branch --env-filter '\nOLD_EMAIL=\"old-email@example.com\"\nNEW_EMAIL=\"new-email@example.com\"\nNEW_NAME=\"New Name\"\nif [ \"$GIT_COMMITTER_EMAIL\" = \"$OLD_EMAIL\" ]\nthen\n    export GIT_COMMITTER_NAME=\"$NEW_NAME\"\n    export GIT_COMMITTER_EMAIL=\"$NEW_EMAIL\"\nfi\nif [ \"$GIT_AUTHOR_EMAIL\" = \"$OLD_EMAIL\" ]\nthen\n    export GIT_AUTHOR_NAME=\"$NEW_NAME\"\n    export GIT_AUTHOR_EMAIL=\"$NEW_EMAIL\"\nfi\n' --tag-name-filter cat -- --branches --tags\n</code></pre>"},{"location":"filter/#using-git-filter-repo","title":"Using <code>git filter-repo</code>","text":"<p><code>git filter-repo</code> is a newer and more efficient tool compared to <code>git filter-branch</code>. It is recommended for most filtering tasks.</p>"},{"location":"filter/#basic-syntax_1","title":"Basic Syntax","text":"<pre><code>git filter-repo --&lt;filter&gt; &lt;options&gt;\n</code></pre>"},{"location":"filter/#example-removing-a-file-from-history_1","title":"Example: Removing a File from History","text":"<p>To remove a file from all commits:</p> <pre><code>git filter-repo --path path/to/file --invert-paths\n</code></pre>"},{"location":"filter/#example-changing-author-information_1","title":"Example: Changing Author Information","text":"<p>To change author information in all commits:</p> <pre><code>git filter-repo --commit-callback '\nif commit.author_email == b\"old-email@example.com\":\n    commit.author_email = b\"new-email@example.com\"\n    commit.author_name = b\"New Name\"\nif commit.committer_email == b\"old-email@example.com\":\n    commit.committer_email = b\"new-email@example.com\"\n    commit.committer_name = b\"New Name\"\n'\n</code></pre>"},{"location":"filter/#examples-of-using-git-filter","title":"Examples of Using Git Filter","text":""},{"location":"filter/#example-1-removing-a-file","title":"Example 1: Removing a File","text":"<p>Remove a file from the entire history of a Git repository:</p> <pre><code>git filter-repo --path path/to/file --invert-paths\n</code></pre>"},{"location":"filter/#example-2-changing-email-addresses","title":"Example 2: Changing Email Addresses","text":"<p>Change all instances of an old email address to a new email address:</p> <pre><code>git filter-repo --commit-callback '\nif commit.author_email == b\"old-email@example.com\":\n    commit.author_email = b\"new-email@example.com\"\nif commit.committer_email == b\"old-email@example.com\":\n    commit.committer_email = b\"new-email@example.com\"\n'\n</code></pre>"},{"location":"filter/#example-3-renaming-a-repository","title":"Example 3: Renaming a Repository","text":"<p>Rename a repository from <code>old-repo</code> to <code>new-repo</code>:</p> <pre><code>git filter-repo --path old-repo --to-subdirectory-filter new-repo\n</code></pre>"},{"location":"filter/#common-use-cases","title":"Common Use Cases","text":"<ul> <li>Removing Sensitive Data: Permanently delete sensitive files or data from the repository history.</li> <li>Changing Author Information: Correct or update author names and email addresses.</li> <li>Reorganizing Repository Structure: Change the directory structure or rename repositories.</li> <li>Splitting Repositories: Split a repository into multiple repositories.</li> </ul>"},{"location":"filter/#summary","title":"Summary","text":"<p>Git filtering tools like <code>git filter-branch</code> and <code>git filter-repo</code> are powerful tools for rewriting and filtering Git history. They allow you to perform tasks such as removing sensitive information, changing commit metadata, and modifying repository structure. <code>git filter-repo</code> is generally preferred for new projects due to its efficiency and improved performance.</p>"},{"location":"git_snippets/","title":"Git Snippets","text":""},{"location":"git_snippets/#multiple-git-repositories-download","title":"Multiple Git Repositories Download","text":"<p><code>GHUSER=ronakr14; curl \"https://api.github.com/users/$GHUSER/repos?per_page=1000\" | grep -w clone_url | grep -o '[^\"]\\+://.\\+.git' | xargs -L1 git clone</code></p> <p>** change GHUSER to user from where you want to download the repositories.</p>"},{"location":"git_snippets/#set-vscode-as-git-default-editor","title":"Set VSCode as Git Default editor","text":"<p><code>git config --global core.editor \"code --wait\"</code></p>"},{"location":"git_snippets/#set-your-file-compatible-for-windows-and-linuxfor-windows-user","title":"Set your file compatible for windows and linux.(for windows user)","text":"<p><code>git config --global core.autocrlf true</code> <code>git config --global core.autocrlf input</code></p>"},{"location":"gitattribute/","title":"Git Attributes Tutorial","text":""},{"location":"gitattribute/#overview","title":"Overview","text":"<p>Git attributes are used to define specific behaviors for files in your Git repository. These behaviors can include text encoding, merge strategies, and custom handling of files. Git attributes are configured using the <code>.gitattributes</code> file in the repository. This document covers the basics of using git attributes with examples.</p>"},{"location":"gitattribute/#what-are-git-attributes","title":"What are Git Attributes?","text":"<p>Git attributes allow you to specify how Git should handle certain files in your repository. This can include settings for text file normalization, merge conflict resolution, and other file-specific behaviors. Attributes are defined in the <code>.gitattributes</code> file.</p>"},{"location":"gitattribute/#creating-and-configuring-gitattributes","title":"Creating and Configuring <code>.gitattributes</code>","text":"<p>To use Git attributes, you need to create a <code>.gitattributes</code> file in the root directory of your repository. You can then define attributes for files and directories within this file.</p>"},{"location":"gitattribute/#example-creating-a-gitattributes-file","title":"Example: Creating a <code>.gitattributes</code> File","text":"<ol> <li> <p>Create a <code>.gitattributes</code> file in the root directory of your repository:</p> <pre><code>touch .gitattributes\n</code></pre> </li> <li> <p>Open the file in your text editor and define attributes:</p> <pre><code>*.txt text\n</code></pre> </li> </ol>"},{"location":"gitattribute/#text-attributes","title":"Text Attributes","text":"<p>Text attributes control how text files are handled, such as normalizing line endings.</p>"},{"location":"gitattribute/#example-normalizing-line-endings","title":"Example: Normalizing Line Endings","text":"<ol> <li> <p>Add a text attribute to ensure consistent line endings:</p> <pre><code>*.txt text eol=lf\n</code></pre> <p>This ensures that all <code>.txt</code> files use LF (line feed) line endings.</p> </li> <li> <p>To apply these changes to existing files, you may need to run:</p> <pre><code>git add --renormalize .\n</code></pre> </li> </ol>"},{"location":"gitattribute/#merge-strategies","title":"Merge Strategies","text":"<p>Merge strategies define how Git should handle merge conflicts for specific files.</p>"},{"location":"gitattribute/#example-custom-merge-driver","title":"Example: Custom Merge Driver","text":"<ol> <li> <p>Define a custom merge driver in <code>.gitattributes</code>:</p> <pre><code>*.md merge=union\n</code></pre> </li> <li> <p>Configure the merge driver in the <code>.git/config</code> file:</p> <pre><code>[merge \"union\"]\n    name = \"Union Merge\"\n    driver = cat %A %O %B &gt; %A\n</code></pre> <p>This example uses a \"union\" merge strategy for <code>.md</code> files, concatenating the changes from both branches.</p> </li> </ol>"},{"location":"gitattribute/#exporting-attributes","title":"Exporting Attributes","text":"<p>Attributes can also be used to control file export behavior.</p>"},{"location":"gitattribute/#example-excluding-files-from-export","title":"Example: Excluding Files from Export","text":"<ol> <li> <p>Exclude files from export with <code>export-ignore</code>:</p> <pre><code>*.log export-ignore\n</code></pre> <p>This prevents <code>.log</code> files from being included in exported archives (e.g., zip files).</p> </li> </ol>"},{"location":"gitattribute/#custom-attributes","title":"Custom Attributes","text":"<p>Custom attributes allow you to define arbitrary attributes that can be used by scripts or tools.</p>"},{"location":"gitattribute/#example-defining-and-using-custom-attributes","title":"Example: Defining and Using Custom Attributes","text":"<ol> <li> <p>Define a custom attribute in <code>.gitattributes</code>:</p> <pre><code>*.custom filter=myfilter\n</code></pre> </li> <li> <p>Configure the filter in <code>.git/config</code>:</p> <pre><code>[filter \"myfilter\"]\n    clean = myfilter-clean\n    smudge = myfilter-smudge\n</code></pre> <p>This example uses a custom filter for files with the <code>.custom</code> extension, with specified clean and smudge scripts.</p> </li> </ol>"},{"location":"gitattribute/#useful-tips","title":"Useful Tips","text":"<ul> <li> <p>Check Attributes: Use <code>git check-attr</code> to view the attributes applied to specific files.</p> <pre><code>git check-attr --all &lt;file&gt;\n</code></pre> </li> <li> <p>Global Attributes: You can also configure global attributes by placing the <code>.gitattributes</code> file in your home directory, but this is less common.</p> </li> <li> <p>Documentation: Refer to the Git Attributes Documentation for more detailed information on available attributes and options.</p> </li> </ul>"},{"location":"gitattribute/#summary","title":"Summary","text":"<p>Git attributes provide powerful ways to control how files are handled in your repository. By configuring attributes in the <code>.gitattributes</code> file, you can manage text file normalization, custom merge strategies, export behavior, and custom handling of files. Understanding and utilizing these attributes can help you maintain a consistent and manageable codebase.</p>"},{"location":"hooks/","title":"Git Hooks Tutorial","text":""},{"location":"hooks/#overview","title":"Overview","text":"<p>Git hooks are scripts that Git automatically executes before or after certain events, such as commits or merges. They allow you to automate tasks, enforce rules, and integrate custom workflows into your Git process.</p>"},{"location":"hooks/#what-are-git-hooks","title":"What are Git Hooks?","text":"<p>Git hooks are scripts located in the <code>.git/hooks</code> directory of a Git repository. They can be triggered by various Git commands and events. Hooks can be used to perform automated tasks, enforce coding standards, or integrate with other tools.</p>"},{"location":"hooks/#types-of-git-hooks","title":"Types of Git Hooks","text":"<p>Git provides several types of hooks, each associated with a specific event:</p> <ul> <li>Pre-commit: Runs before a commit is created.</li> <li>Post-commit: Runs after a commit is created.</li> <li>Pre-receive: Runs on the server before changes are accepted.</li> <li>Post-receive: Runs on the server after changes are accepted.</li> <li>Pre-push: Runs before changes are pushed to a remote repository.</li> <li>Update: Runs on the server when a branch is updated.</li> <li>Prepare-commit-msg: Runs before the commit message editor is opened.</li> <li>Commit-msg: Runs after the commit message is entered.</li> <li>Post-merge: Runs after a merge is completed.</li> <li>Pre-rebase: Runs before a rebase starts.</li> <li>Post-checkout: Runs after a <code>git checkout</code> command.</li> </ul>"},{"location":"hooks/#setting-up-git-hooks","title":"Setting Up Git Hooks","text":"<p>To set up a Git hook, follow these steps:</p> <ol> <li> <p>Navigate to the Hooks Directory:</p> <pre><code>cd .git/hooks\n</code></pre> </li> <li> <p>Create or Edit a Hook Script:</p> <p>Git hooks are typically written in shell script, but you can use other scripting languages like Python or Perl.</p> <pre><code>touch pre-commit\nchmod +x pre-commit\n</code></pre> </li> <li> <p>Write the Hook Script:</p> <p>Edit the hook script to include the commands you want to run. For example, you can use <code>nano</code>, <code>vim</code>, or any text editor.</p> <pre><code>nano pre-commit\n</code></pre> </li> <li> <p>Add Your Script Content:</p> <p>Add the commands or script logic you need. Save and exit the editor.</p> <pre><code>#!/bin/sh\necho \"Running pre-commit hook\"\n</code></pre> </li> </ol>"},{"location":"hooks/#examples-of-git-hooks","title":"Examples of Git Hooks","text":""},{"location":"hooks/#pre-commit-hook","title":"Pre-commit Hook","text":"<p>The <code>pre-commit</code> hook runs before a commit is made. It\u2019s often used to run tests or lint code.</p>"},{"location":"hooks/#example-linting-code","title":"Example: Linting Code","text":"<pre><code>#!/bin/sh\n# pre-commit hook to lint code before committing\n\n# Run a linter (e.g., eslint for JavaScript)\neslint .\n\n# Check if linting passed\nif [ $? -ne 0 ]; then\n    echo \"Linting failed. Commit aborted.\"\n    exit 1\nfi\n</code></pre>"},{"location":"hooks/#commit-msg-hook","title":"Commit-msg Hook","text":"<p>The <code>commit-msg</code> hook checks the commit message before the commit is finalized. It can be used to enforce commit message conventions.</p>"},{"location":"hooks/#example-enforce-commit-message-format","title":"Example: Enforce Commit Message Format","text":"<pre><code>#!/bin/sh\n# commit-msg hook to enforce commit message format\n\nMESSAGE_FILE=$1\nMESSAGE=$(cat $MESSAGE_FILE)\n\nif ! echo \"$MESSAGE\" | grep -q \"^\\[ISSUE-\\[0-9\\]+\\] \"; then\n    echo \"Commit message must start with '[ISSUE-&lt;number&gt;] '\"\n    exit 1\nfi\n</code></pre>"},{"location":"hooks/#post-commit-hook","title":"Post-commit Hook","text":"<p>The <code>post-commit</code> hook runs after a commit is created. It can be used to notify or log commit details.</p>"},{"location":"hooks/#example-notify-on-commit","title":"Example: Notify on Commit","text":"<pre><code>#!/bin/sh\n# post-commit hook to send a notification after commit\n\n# Get the latest commit hash\nLATEST_COMMIT=$(git log -1 --format=\"%H\")\n\n# Send a notification (e.g., using a webhook)\ncurl -X POST -H 'Content-type: application/json' --data '{\"text\":\"New commit made: '\"$LATEST_COMMIT\"'\"}' https://your-webhook-url\n</code></pre>"},{"location":"hooks/#common-use-cases","title":"Common Use Cases","text":"<ul> <li>Code Quality: Run linters, formatters, or tests before committing to ensure code quality.</li> <li>Commit Message Validation: Enforce conventions for commit messages to maintain consistency.</li> <li>Automated Notifications: Send notifications or alerts when commits or merges occur.</li> <li>Deployment: Trigger deployment scripts or processes after successful commits or pushes.</li> </ul>"},{"location":"hooks/#summary","title":"Summary","text":"<p>Git hooks are powerful tools that allow you to automate various tasks and enforce rules within your Git workflow. By configuring hooks like <code>pre-commit</code>, <code>commit-msg</code>, and <code>post-commit</code>, you can improve code quality, maintain consistency, and integrate with other tools. Customize your Git hooks to fit your development process and enhance productivity.</p>"},{"location":"ignore/","title":"Git Ignore Tutorial","text":""},{"location":"ignore/#overview","title":"Overview","text":"<p>The <code>.gitignore</code> file specifies which files and directories should be ignored by Git. This is useful for excluding files that are not necessary to track in your repository, such as build artifacts, temporary files, or sensitive information.</p>"},{"location":"ignore/#introduction-to-gitignore","title":"Introduction to .gitignore","text":"<p>The <code>.gitignore</code> file is a text file that tells Git which files or directories to ignore in a project. It should be placed in the root directory of your project. Each line in the <code>.gitignore</code> file contains a pattern for files or directories to ignore.</p>"},{"location":"ignore/#basic-syntax","title":"Basic Syntax","text":"<ul> <li>Lines starting with <code>#</code>: These are comments.</li> <li>Blank lines: These are ignored and can be used for readability.</li> <li>Patterns: These specify the files or directories to be ignored.</li> </ul>"},{"location":"ignore/#pattern-examples","title":"Pattern Examples","text":"<ul> <li><code>*.log</code>: Ignore all <code>.log</code> files.</li> <li><code>build/</code>: Ignore the <code>build</code> directory.</li> <li><code>!important.log</code>: Do not ignore <code>important.log</code>.</li> </ul>"},{"location":"ignore/#examples","title":"Examples","text":""},{"location":"ignore/#ignoring-specific-files","title":"Ignoring Specific Files","text":"<p>To ignore specific files, simply list their names:</p> <pre><code># Ignore log files\nerror.log\ndebug.log\n</code></pre>"},{"location":"ignore/#ignoring-directories","title":"Ignoring Directories","text":"<p>To ignore entire directories, include the directory name followed by a slash:</p> <pre><code># Ignore the build directory\nbuild/\n</code></pre>"},{"location":"ignore/#ignoring-file-patterns","title":"Ignoring File Patterns","text":"<p>To ignore files based on patterns, use wildcard characters:</p> <pre><code># Ignore all .tmp files\n*.tmp\n\n# Ignore all .bak files in the project\n*.bak\n</code></pre>"},{"location":"ignore/#ignoring-files-in-subdirectories","title":"Ignoring Files in Subdirectories","text":"<p>To ignore files in specific subdirectories, include the path:</p> <pre><code># Ignore all .log files in logs/ directory\nlogs/*.log\n\n# Ignore all .log files in any subdirectory\n**/*.log\n</code></pre>"},{"location":"ignore/#special-patterns","title":"Special Patterns","text":"<ul> <li><code>**</code>: Matches directories and files recursively.</li> <li><code>/</code>: Directory separator.</li> <li><code>!</code>: Negates the pattern, causing matches to be included instead of ignored.</li> </ul>"},{"location":"ignore/#examples-of-special-patterns","title":"Examples of Special Patterns","text":"<pre><code># Ignore all files ending with .log\n*.log\n\n# Do not ignore important.log\n!important.log\n\n# Ignore everything in the build directory except the file build/keepme.txt\nbuild/*\n!build/keepme.txt\n\n# Ignore all .log files in any directory except logs/ directory\n**/*.log\n!logs/**/*.log\n</code></pre>"},{"location":"ignore/#global-gitignore","title":"Global .gitignore","text":"<p>You can create a global <code>.gitignore</code> file that applies to all your repositories. This is useful for ignoring files like OS-specific files (e.g., <code>.DS_Store</code> on macOS, <code>Thumbs.db</code> on Windows).</p>"},{"location":"ignore/#setting-up-a-global-gitignore","title":"Setting Up a Global .gitignore","text":"<ol> <li> <p>Create a global <code>.gitignore</code> file:</p> <pre><code>touch ~/.gitignore_global\n</code></pre> </li> <li> <p>Add patterns to the global <code>.gitignore</code> file:</p> <pre><code># Ignore macOS specific files\n.DS_Store\n\n# Ignore Windows specific files\nThumbs.db\n</code></pre> </li> <li> <p>Configure Git to use the global <code>.gitignore</code> file:</p> <pre><code>git config --global core.excludesfile ~/.gitignore_global\n</code></pre> </li> </ol>"},{"location":"ignore/#useful-tips","title":"Useful Tips","text":"<ul> <li>Order of Rules: The order of patterns in the <code>.gitignore</code> file matters. Later rules can override earlier ones.</li> <li> <p>Testing Patterns: Use the <code>git check-ignore</code> command to test which files are ignored by your <code>.gitignore</code> patterns:</p> <pre><code>git check-ignore -v filename\n</code></pre> </li> <li> <p>Versioning <code>.gitignore</code>: It's a good practice to version your <code>.gitignore</code> file to ensure all collaborators ignore the same files.</p> </li> </ul>"},{"location":"ignore/#summary","title":"Summary","text":"<p>The <code>.gitignore</code> file is a powerful tool in Git for managing which files and directories should be excluded from version control. By understanding the basic syntax, special patterns, and how to set up a global <code>.gitignore</code>, you can ensure your repositories stay clean and only track necessary files.</p>"},{"location":"init/","title":"Git Init Commands","text":""},{"location":"init/#overview","title":"Overview","text":"<p>The <code>git init</code> command is used to create a new Git repository. It initializes a new repository in the current directory, making it ready to track changes. This document covers the basic and advanced usage of <code>git init</code>.</p>"},{"location":"init/#basic-initialization","title":"Basic Initialization","text":""},{"location":"init/#git-init","title":"<code>git init</code>","text":"<p>Initializes a new Git repository in the current directory.</p> <pre><code>git init\n</code></pre>"},{"location":"init/#example","title":"Example","text":"<pre><code>mkdir my-new-project\ncd my-new-project\ngit init\n</code></pre> <p>This command creates a new Git repository in the <code>my-new-project</code> directory.</p>"},{"location":"init/#initialization-with-a-specific-directory","title":"Initialization with a Specific Directory","text":""},{"location":"init/#git-init-directory","title":"<code>git init &lt;directory&gt;</code>","text":"<p>Initializes a new Git repository in the specified directory. If the directory does not exist, it will be created.</p> <pre><code>git init &lt;directory&gt;\n</code></pre>"},{"location":"init/#example_1","title":"Example","text":"<pre><code>git init my-new-project\n</code></pre> <p>This command creates a new Git repository in the <code>my-new-project</code> directory.</p>"},{"location":"init/#initialization-with-a-bare-repository","title":"Initialization with a Bare Repository","text":""},{"location":"init/#git-init-bare","title":"<code>git init --bare</code>","text":"<p>Initializes a new bare Git repository. Bare repositories are used as remote repositories and do not contain a working directory.</p> <pre><code>git init --bare &lt;directory&gt;\n</code></pre>"},{"location":"init/#example_2","title":"Example","text":"<pre><code>git init --bare /path/to/bare-repo.git\n</code></pre> <p>This command creates a new bare Git repository in the specified path.</p>"},{"location":"init/#initialization-with-a-specific-template","title":"Initialization with a Specific Template","text":""},{"location":"init/#git-init-templatetemplate_directory","title":"<code>git init --template=&lt;template_directory&gt;</code>","text":"<p>Initializes a new Git repository with the specified template directory. This allows you to include custom configuration files or hooks.</p> <pre><code>git init --template=&lt;template_directory&gt;\n</code></pre>"},{"location":"init/#example_3","title":"Example","text":"<pre><code>git init --template=/path/to/my-template\n</code></pre> <p>This command initializes a new Git repository using the custom template located at <code>/path/to/my-template</code>.</p>"},{"location":"init/#initialization-with-configuration-options","title":"Initialization with Configuration Options","text":""},{"location":"init/#git-init-b-branch","title":"<code>git init -b &lt;branch&gt;</code>","text":"<p>Initializes a new Git repository with the specified initial branch name. This is useful for setting a default branch other than <code>main</code> or <code>master</code>.</p> <pre><code>git init -b &lt;branch&gt;\n</code></pre>"},{"location":"init/#example_4","title":"Example","text":"<pre><code>git init -b main\n</code></pre> <p>This command initializes a new Git repository with the initial branch named <code>main</code>.</p>"},{"location":"init/#summary","title":"Summary","text":"<p>The <code>git init</code> command is the starting point for creating a new Git repository. It sets up the necessary files and directories for version control. You can customize the initialization process with options such as creating a bare repository, specifying a template, or setting an initial branch name. For more detailed information on each command, refer to the official Git documentation.</p>"},{"location":"lfs/","title":"Git LFS (Large File Storage) Tutorial","text":""},{"location":"lfs/#overview","title":"Overview","text":"<p>Git Large File Storage (LFS) is an extension for Git that improves the handling of large files in repositories. Instead of storing large files directly in the Git repository, Git LFS replaces them with text pointers inside the repository and stores the actual file contents on a remote server.</p>"},{"location":"lfs/#what-is-git-lfs","title":"What is Git LFS?","text":"<p>Git LFS (Large File Storage) helps manage large files in Git repositories by replacing large files with small pointer files in the repository and storing the actual file content on a remote server. This reduces the size of the Git repository and speeds up operations like cloning and fetching.</p>"},{"location":"lfs/#installation","title":"Installation","text":"<p>To use Git LFS, you first need to install it. Follow these steps:</p>"},{"location":"lfs/#on-macos","title":"On macOS","text":"<pre><code>brew install git-lfs\n</code></pre>"},{"location":"lfs/#on-windows","title":"On Windows","text":"<p>Download the installer from the Git LFS releases page and follow the installation instructions.</p>"},{"location":"lfs/#on-linux","title":"On Linux","text":"<p>Use the package manager specific to your distribution:</p> <pre><code># Debian/Ubuntu\nsudo apt-get install git-lfs\n\n# Fedora\nsudo dnf install git-lfs\n\n# CentOS\nsudo yum install git-lfs\n</code></pre> <p>After installation, you need to initialize Git LFS in your repository:</p> <pre><code>git lfs install\n</code></pre>"},{"location":"lfs/#basic-commands","title":"Basic Commands","text":""},{"location":"lfs/#track-files","title":"Track Files","text":"<p>To track files with Git LFS, specify the file patterns to be managed by LFS:</p> <pre><code>git lfs track \"*.psd\"\n</code></pre> <p>This command adds the specified file pattern to <code>.gitattributes</code>, which tells Git LFS to manage files matching this pattern.</p>"},{"location":"lfs/#untrack-files","title":"Untrack Files","text":"<p>To stop tracking files with Git LFS, use:</p> <pre><code>git lfs untrack \"*.psd\"\n</code></pre> <p>This command removes the specified file pattern from <code>.gitattributes</code>.</p>"},{"location":"lfs/#add-files","title":"Add Files","text":"<p>Add files to the Git repository as usual:</p> <pre><code>git add path/to/largefile.psd\n</code></pre>"},{"location":"lfs/#commit-files","title":"Commit Files","text":"<p>Commit the changes to the repository:</p> <pre><code>git commit -m \"Add large file using Git LFS\"\n</code></pre>"},{"location":"lfs/#push-changes","title":"Push Changes","text":"<p>Push your changes to the remote repository:</p> <pre><code>git push origin main\n</code></pre> <p>Git LFS will upload the large files to the LFS cache on the server.</p>"},{"location":"lfs/#pull-changes","title":"Pull Changes","text":"<p>To fetch the large files stored in LFS, use:</p> <pre><code>git pull\n</code></pre>"},{"location":"lfs/#clone-repository","title":"Clone Repository","text":"<p>When cloning a repository with LFS files, use:</p> <pre><code>git clone &lt;repository-url&gt;\n</code></pre> <p>Git LFS will automatically download the large files after cloning.</p>"},{"location":"lfs/#examples","title":"Examples","text":""},{"location":"lfs/#example-1-tracking-and-committing-a-large-file","title":"Example 1: Tracking and Committing a Large File","text":"<ol> <li> <p>Initialize Git LFS:</p> <pre><code>git lfs install\n</code></pre> </li> <li> <p>Track a Large File:</p> <pre><code>git lfs track \"*.zip\"\n</code></pre> </li> <li> <p>Add and Commit the File:</p> <pre><code>git add largefile.zip\ngit commit -m \"Add large zip file using Git LFS\"\n</code></pre> </li> <li> <p>Push to Remote:</p> <pre><code>git push origin main\n</code></pre> </li> <li> <p>Verify LFS Tracking:</p> <pre><code>git lfs ls-files\n</code></pre> </li> </ol>"},{"location":"lfs/#example-2-untracking-a-file","title":"Example 2: Untracking a File","text":"<ol> <li> <p>Untrack a File:</p> <pre><code>git lfs untrack \"*.zip\"\n</code></pre> </li> <li> <p>Remove the File from Git LFS:</p> <p>Remove the file from the repository and re-add it if needed:</p> <pre><code>git rm --cached largefile.zip\ngit add largefile.zip\ngit commit -m \"Remove large file from Git LFS\"\n</code></pre> </li> <li> <p>Push Changes:</p> <pre><code>git push origin main\n</code></pre> </li> </ol>"},{"location":"lfs/#common-use-cases","title":"Common Use Cases","text":"<ul> <li>Managing Large Binary Files: Ideal for large files like images, videos, datasets, and compiled binaries.</li> <li>Reducing Repository Size: Keeps the repository size manageable by storing large files on a remote server.</li> <li>Improving Clone and Fetch Performance: Reduces the time required to clone or fetch repositories with large files.</li> </ul>"},{"location":"lfs/#summary","title":"Summary","text":"<p>Git LFS is a valuable tool for managing large files in Git repositories, improving performance, and reducing repository size. By tracking large files with Git LFS, you can efficiently handle large assets while keeping your Git repository lightweight and responsive.</p>"},{"location":"log/","title":"Git Log Commands","text":""},{"location":"log/#overview","title":"Overview","text":"<p>The <code>git log</code> command is used to view the commit history of a Git repository. It provides a detailed log of commits, including commit messages, author information, and dates. This document covers the basic and advanced usage of <code>git log</code>.</p>"},{"location":"log/#basic-log","title":"Basic Log","text":""},{"location":"log/#git-log","title":"<code>git log</code>","text":"<p>Displays the commit history of the current branch.</p> <pre><code>git log\n</code></pre>"},{"location":"log/#example","title":"Example","text":"<pre><code>git log\n</code></pre> <p>This command shows the commit history with details like commit hash, author, date, and commit message.</p>"},{"location":"log/#one-line-log","title":"One-Line Log","text":""},{"location":"log/#git-log-oneline","title":"<code>git log --oneline</code>","text":"<p>Displays the commit history with each commit on a single line, showing the commit hash and message.</p> <pre><code>git log --oneline\n</code></pre>"},{"location":"log/#example_1","title":"Example","text":"<pre><code>git log --oneline\n</code></pre> <p>This command provides a simplified view of the commit history with a short commit hash and message.</p>"},{"location":"log/#log-with-graph","title":"Log with Graph","text":""},{"location":"log/#git-log-graph","title":"<code>git log --graph</code>","text":"<p>Displays the commit history as a graph with a visual representation of branch and merge history.</p> <pre><code>git log --graph\n</code></pre>"},{"location":"log/#example_2","title":"Example","text":"<pre><code>git log --graph\n</code></pre> <p>This command shows the commit history with a graphical representation of branches and merges.</p>"},{"location":"log/#log-with-details","title":"Log with Details","text":""},{"location":"log/#git-log-stat","title":"<code>git log --stat</code>","text":"<p>Displays the commit history with a summary of changes for each commit, including modified files and the number of changes.</p> <pre><code>git log --stat\n</code></pre>"},{"location":"log/#example_3","title":"Example","text":"<pre><code>git log --stat\n</code></pre> <p>This command shows the commit history along with a summary of changes for each commit.</p>"},{"location":"log/#log-with-formatting","title":"Log with Formatting","text":""},{"location":"log/#git-log-prettyformatformat","title":"<code>git log --pretty=format:\"&lt;format&gt;\"</code>","text":"<p>Customizes the log output using a specified format.</p> <pre><code>git log --pretty=format:\"&lt;format&gt;\"\n</code></pre>"},{"location":"log/#example_4","title":"Example","text":"<pre><code>git log --pretty=format:\"%h - %an, %ar : %s\"\n</code></pre> <p>This command customizes the log output to show the commit hash, author name, relative date, and commit message.</p>"},{"location":"log/#log-for-a-specific-file","title":"Log for a Specific File","text":""},{"location":"log/#git-log-file","title":"<code>git log &lt;file&gt;</code>","text":"<p>Displays the commit history for a specific file.</p> <pre><code>git log &lt;file&gt;\n</code></pre>"},{"location":"log/#example_5","title":"Example","text":"<pre><code>git log src/main.py\n</code></pre> <p>This command shows the commit history for <code>src/main.py</code>, including all changes made to the file.</p>"},{"location":"log/#log-for-a-date-range","title":"Log for a Date Range","text":""},{"location":"log/#git-log-sincedate-untildate","title":"<code>git log --since=\"&lt;date&gt;\" --until=\"&lt;date&gt;\"</code>","text":"<p>Displays the commit history within a specific date range.</p> <pre><code>git log --since=\"&lt;date&gt;\" --until=\"&lt;date&gt;\"\n</code></pre>"},{"location":"log/#example_6","title":"Example","text":"<pre><code>git log --since=\"2024-01-01\" --until=\"2024-06-30\"\n</code></pre> <p>This command shows commits made between January 1, 2024, and June 30, 2024.</p>"},{"location":"log/#log-for-a-specific-author","title":"Log for a Specific Author","text":""},{"location":"log/#git-log-authorauthor","title":"<code>git log --author=\"&lt;author&gt;\"</code>","text":"<p>Displays the commit history for commits made by a specific author.</p> <pre><code>git log --author=\"&lt;author&gt;\"\n</code></pre>"},{"location":"log/#example_7","title":"Example","text":"<pre><code>git log --author=\"John Doe\"\n</code></pre> <p>This command shows commits made by the author \"John Doe.\"</p>"},{"location":"log/#log-with-search","title":"Log with Search","text":""},{"location":"log/#git-log-greppattern","title":"<code>git log --grep=\"&lt;pattern&gt;\"</code>","text":"<p>Displays commits that match a specified search pattern in the commit message.</p> <pre><code>git log --grep=\"&lt;pattern&gt;\"\n</code></pre>"},{"location":"log/#example_8","title":"Example","text":"<pre><code>git log --grep=\"bug fix\"\n</code></pre> <p>This command shows commits with messages containing the pattern \"bug fix.\"</p>"},{"location":"log/#summary","title":"Summary","text":"<p>The <code>git log</code> command is a powerful tool for viewing and analyzing the commit history of a Git repository. It provides various options for customizing the log output, filtering by date, author, or file, and formatting the results. For more detailed information on each command, refer to the official Git documentation.</p>"},{"location":"merge/","title":"Git Merge Commands","text":""},{"location":"merge/#overview","title":"Overview","text":"<p>The <code>git merge</code> command is used to integrate changes from one branch into another. It combines the changes made in different branches and helps in synchronizing work. This document covers the basic and advanced usage of <code>git merge</code>.</p>"},{"location":"merge/#basic-merge","title":"Basic Merge","text":""},{"location":"merge/#git-merge-branch","title":"<code>git merge &lt;branch&gt;</code>","text":"<p>Merges the specified branch into the current branch.</p> <pre><code>git merge &lt;branch&gt;\n</code></pre>"},{"location":"merge/#example","title":"Example","text":"<pre><code>git checkout main\ngit merge feature-branch\n</code></pre> <p>This command merges changes from <code>feature-branch</code> into the <code>main</code> branch.</p>"},{"location":"merge/#merge-with-fast-forward","title":"Merge with Fast-Forward","text":""},{"location":"merge/#git-merge-ff-branch","title":"<code>git merge --ff &lt;branch&gt;</code>","text":"<p>Performs a fast-forward merge if possible. This is the default behavior when the current branch is a direct ancestor of the branch being merged.</p> <pre><code>git merge --ff &lt;branch&gt;\n</code></pre>"},{"location":"merge/#example_1","title":"Example","text":"<pre><code>git checkout main\ngit merge --ff feature-branch\n</code></pre> <p>This command performs a fast-forward merge if <code>main</code> is a direct ancestor of <code>feature-branch</code>.</p>"},{"location":"merge/#merge-with-no-fast-forward","title":"Merge with No Fast-Forward","text":""},{"location":"merge/#git-merge-no-ff-branch","title":"<code>git merge --no-ff &lt;branch&gt;</code>","text":"<p>Performs a merge with a merge commit, even if a fast-forward merge is possible. This is useful for preserving the history of the branch being merged.</p> <pre><code>git merge --no-ff &lt;branch&gt;\n</code></pre>"},{"location":"merge/#example_2","title":"Example","text":"<pre><code>git checkout main\ngit merge --no-ff feature-branch\n</code></pre> <p>This command creates a merge commit even if the <code>feature-branch</code> can be fast-forwarded into <code>main</code>.</p>"},{"location":"merge/#merge-with-commit-message","title":"Merge with Commit Message","text":""},{"location":"merge/#git-merge-no-commit-branch","title":"<code>git merge --no-commit &lt;branch&gt;</code>","text":"<p>Merges the specified branch into the current branch but does not automatically create a commit. This allows you to review changes before committing.</p> <pre><code>git merge --no-commit &lt;branch&gt;\n</code></pre>"},{"location":"merge/#example_3","title":"Example","text":"<pre><code>git checkout main\ngit merge --no-commit feature-branch\n</code></pre> <p>This command merges <code>feature-branch</code> into <code>main</code> without committing the merge, allowing you to review and modify changes before committing.</p>"},{"location":"merge/#merge-with-strategy","title":"Merge with Strategy","text":""},{"location":"merge/#git-merge-s-strategy-branch","title":"<code>git merge -s &lt;strategy&gt; &lt;branch&gt;</code>","text":"<p>Uses a specific merge strategy to combine changes. Common strategies include <code>recursive</code>, <code>ours</code>, and <code>theirs</code>.</p> <pre><code>git merge -s &lt;strategy&gt; &lt;branch&gt;\n</code></pre>"},{"location":"merge/#example_4","title":"Example","text":"<pre><code>git checkout main\ngit merge -s ours feature-branch\n</code></pre> <p>This command uses the <code>ours</code> strategy to merge <code>feature-branch</code> into <code>main</code>, favoring the current branch's changes.</p>"},{"location":"merge/#merge-with-message","title":"Merge with Message","text":""},{"location":"merge/#git-merge-m-message-branch","title":"<code>git merge -m \"&lt;message&gt;\" &lt;branch&gt;</code>","text":"<p>Merges the specified branch and includes a custom commit message for the merge commit.</p> <pre><code>git merge -m \"&lt;message&gt;\" &lt;branch&gt;\n</code></pre>"},{"location":"merge/#example_5","title":"Example","text":"<pre><code>git checkout main\ngit merge -m \"Merge feature-branch into main\" feature-branch\n</code></pre> <p>This command merges <code>feature-branch</code> into <code>main</code> with the specified commit message.</p>"},{"location":"merge/#resolve-merge-conflicts","title":"Resolve Merge Conflicts","text":""},{"location":"merge/#handling-conflicts","title":"Handling Conflicts","text":"<p>If conflicts arise during a merge, Git will pause the merge process and mark the conflicting files. You need to manually resolve these conflicts and then complete the merge.</p>"},{"location":"merge/#example_6","title":"Example","text":"<pre><code>git merge feature-branch\n# Resolve conflicts in the files\ngit add &lt;resolved-file&gt;\ngit commit\n</code></pre> <p>This process involves resolving conflicts in files marked by Git, staging the resolved files, and then committing the merge.</p>"},{"location":"merge/#summary","title":"Summary","text":"<p>The <code>git merge</code> command is a key tool for integrating changes from one branch into another. It provides options for fast-forward merges, preserving history, and using specific merge strategies. Handling merge conflicts is a common part of the merging process, requiring manual resolution before finalizing the merge. For more detailed information on each command, refer to the official Git documentation.</p>"},{"location":"patch/","title":"Git Patch Tutorial","text":""},{"location":"patch/#overview","title":"Overview","text":"<p>The <code>git patch</code> command is used to create, apply, and manage patches in Git. A patch file contains a list of changes made to a set of files, which can be used to share changes with others or to apply changes across different branches or repositories.</p>"},{"location":"patch/#what-is-a-git-patch","title":"What is a Git Patch?","text":"<p>A Git patch is a text file that contains a list of changes between two versions of a file or set of files. It includes information about what has been added, removed, or modified. Patches can be used to transfer changes between repositories or branches without using Git's built-in merge or rebase commands.</p>"},{"location":"patch/#creating-a-patch","title":"Creating a Patch","text":"<p>To create a patch file, you can use the <code>git format-patch</code> command. This command generates a patch file from commits in your repository.</p>"},{"location":"patch/#basic-syntax","title":"Basic Syntax","text":"<pre><code>git format-patch [options] &lt;since-commit&gt;\n</code></pre>"},{"location":"patch/#example-create-a-patch-for-the-last-commit","title":"Example: Create a Patch for the Last Commit","text":"<p>To create a patch for the most recent commit:</p> <pre><code>git format-patch -1 HEAD\n</code></pre> <p>This command generates a patch file named <code>0001-&lt;commit-message&gt;.patch</code>.</p>"},{"location":"patch/#example-create-a-patch-for-a-range-of-commits","title":"Example: Create a Patch for a Range of Commits","text":"<p>To create patches for the last 3 commits:</p> <pre><code>git format-patch -3 HEAD\n</code></pre> <p>This command generates patch files for the last 3 commits.</p>"},{"location":"patch/#applying-a-patch","title":"Applying a Patch","text":"<p>To apply a patch file, you use the <code>git apply</code> command.</p>"},{"location":"patch/#basic-syntax_1","title":"Basic Syntax","text":"<pre><code>git apply &lt;patch-file&gt;\n</code></pre>"},{"location":"patch/#example-apply-a-patch-file","title":"Example: Apply a Patch File","text":"<p>To apply a patch file named <code>0001-fix-issue.patch</code>:</p> <pre><code>git apply 0001-fix-issue.patch\n</code></pre>"},{"location":"patch/#example-apply-a-patch-with-reverse-option","title":"Example: Apply a Patch with Reverse Option","text":"<p>To reverse the changes introduced by a patch:</p> <pre><code>git apply -R 0001-fix-issue.patch\n</code></pre>"},{"location":"patch/#viewing-a-patch","title":"Viewing a Patch","text":"<p>You can view the contents of a patch file using standard text viewing commands.</p>"},{"location":"patch/#example-view-a-patch-file","title":"Example: View a Patch File","text":"<p>To view a patch file using <code>cat</code>:</p> <pre><code>cat 0001-fix-issue.patch\n</code></pre> <p>Or using <code>less</code> for paginated view:</p> <pre><code>less 0001-fix-issue.patch\n</code></pre>"},{"location":"patch/#examples","title":"Examples","text":""},{"location":"patch/#example-1-creating-and-applying-a-patch","title":"Example 1: Creating and Applying a Patch","text":"<ol> <li> <p>Create a Patch for the Last Commit:</p> <pre><code>git format-patch -1 HEAD\n</code></pre> </li> <li> <p>Apply the Patch in Another Repository:</p> <pre><code>git apply 0001-&lt;commit-message&gt;.patch\n</code></pre> </li> </ol>"},{"location":"patch/#example-2-creating-a-patch-for-a-specific-range","title":"Example 2: Creating a Patch for a Specific Range","text":"<ol> <li> <p>Create Patches for a Range of Commits:</p> <pre><code>git format-patch HEAD~3..HEAD\n</code></pre> </li> <li> <p>Apply Multiple Patches:</p> <pre><code>git am 0001-patch1.patch 0002-patch2.patch\n</code></pre> </li> </ol>"},{"location":"patch/#common-use-cases","title":"Common Use Cases","text":"<ul> <li>Code Review: Sharing specific changes with reviewers for feedback.</li> <li>Patching Across Repositories: Applying changes from one repository to another without merging.</li> <li>Backup: Saving changes as patches to apply later or on different branches.</li> </ul>"},{"location":"patch/#summary","title":"Summary","text":"<p>Git patches are a powerful way to manage and share changes in your codebase. By creating and applying patches, you can efficiently transfer changes between repositories or branches and streamline code reviews and integration processes.</p>"},{"location":"pull/","title":"Git Pull Commands","text":""},{"location":"pull/#overview","title":"Overview","text":"<p>The <code>git pull</code> command is used to fetch and integrate changes from a remote repository into your local repository. This command combines <code>git fetch</code> and <code>git merge</code>, automatically merging the fetched changes into the current branch. This document covers the basic and advanced usage of <code>git pull</code>.</p>"},{"location":"pull/#basic-pull","title":"Basic Pull","text":""},{"location":"pull/#git-pull","title":"<code>git pull</code>","text":"<p>Fetches changes from the configured upstream branch and merges them into the current branch.</p> <pre><code>git pull\n</code></pre>"},{"location":"pull/#example","title":"Example","text":"<pre><code>git pull\n</code></pre> <p>This command fetches and merges changes from the upstream branch of the current branch.</p>"},{"location":"pull/#git-pull-remote-branch","title":"<code>git pull &lt;remote&gt; &lt;branch&gt;</code>","text":"<p>Fetches changes from a specific remote branch and merges them into the current branch.</p> <pre><code>git pull &lt;remote&gt; &lt;branch&gt;\n</code></pre>"},{"location":"pull/#example_1","title":"Example","text":"<pre><code>git pull origin main\n</code></pre> <p>This command fetches and merges changes from the <code>main</code> branch of the <code>origin</code> remote into the current branch.</p>"},{"location":"pull/#pull-with-rebase","title":"Pull with Rebase","text":""},{"location":"pull/#git-pull-rebase","title":"<code>git pull --rebase</code>","text":"<p>Fetches changes from the configured upstream branch and rebases the current branch on top of them instead of merging.</p> <pre><code>git pull --rebase\n</code></pre>"},{"location":"pull/#example_2","title":"Example","text":"<pre><code>git pull --rebase\n</code></pre> <p>This command fetches changes from the upstream branch and rebases the current branch on top of them.</p>"},{"location":"pull/#git-pull-rebase-remote-branch","title":"<code>git pull --rebase &lt;remote&gt; &lt;branch&gt;</code>","text":"<p>Fetches changes from a specific remote branch and rebases the current branch on top of them.</p> <pre><code>git pull --rebase &lt;remote&gt; &lt;branch&gt;\n</code></pre>"},{"location":"pull/#example_3","title":"Example","text":"<pre><code>git pull --rebase origin main\n</code></pre> <p>This command fetches changes from the <code>main</code> branch of the <code>origin</code> remote and rebases the current branch on top of them.</p>"},{"location":"pull/#specifying-a-rebase-strategy","title":"Specifying a Rebase Strategy","text":""},{"location":"pull/#git-pull-rebaseinteractive","title":"<code>git pull --rebase=interactive</code>","text":"<p>Uses interactive rebase during the pull operation.</p> <pre><code>git pull --rebase=interactive\n</code></pre>"},{"location":"pull/#example_4","title":"Example","text":"<pre><code>git pull --rebase=interactive\n</code></pre> <p>This command fetches changes from the upstream branch and allows you to interactively rebase the current branch on top of them.</p>"},{"location":"pull/#pull-with-auto-stash","title":"Pull with Auto-stash","text":""},{"location":"pull/#git-pull-autostash","title":"<code>git pull --autostash</code>","text":"<p>Stashes local changes before pulling and re-applies them after the pull.</p> <pre><code>git pull --autostash\n</code></pre>"},{"location":"pull/#example_5","title":"Example","text":"<pre><code>git pull --autostash\n</code></pre> <p>This command stashes any local changes, pulls changes from the upstream branch, and then reapplies the stashed changes.</p>"},{"location":"pull/#pulling-specific-commits","title":"Pulling Specific Commits","text":""},{"location":"pull/#git-pull-depth-depth","title":"<code>git pull --depth &lt;depth&gt;</code>","text":"<p>Fetches only the specified number of commits from the remote repository.</p> <pre><code>git pull --depth &lt;depth&gt;\n</code></pre>"},{"location":"pull/#example_6","title":"Example","text":"<pre><code>git pull --depth 1\n</code></pre> <p>This command fetches only the latest commit from the remote repository.</p>"},{"location":"pull/#fetch-and-merge","title":"Fetch and Merge","text":""},{"location":"pull/#git-fetch-and-git-merge","title":"<code>git fetch</code> and <code>git merge</code>","text":"<p>Fetches changes from a remote repository and merges them into the current branch in two separate steps.</p> <pre><code>git fetch &lt;remote&gt;\ngit merge &lt;remote&gt;/&lt;branch&gt;\n</code></pre>"},{"location":"pull/#example_7","title":"Example","text":"<pre><code>git fetch origin\ngit merge origin/main\n</code></pre> <p>This sequence of commands fetches changes from the <code>main</code> branch of the <code>origin</code> remote and merges them into the current branch.</p>"},{"location":"pull/#summary","title":"Summary","text":"<p>The <code>git pull</code> command is a convenient way to fetch and integrate changes from a remote repository. It can be customized to suit different workflows, such as using rebase instead of merge or stashing changes before pulling. For more detailed information on each command, refer to the official Git documentation.</p>"},{"location":"push/","title":"Git Push Commands","text":""},{"location":"push/#overview","title":"Overview","text":"<p>The <code>git push</code> command is used to upload local repository content to a remote repository. Pushing is how you transfer commits from your local repository to a remote repository. This document covers the basic and advanced usage of <code>git push</code>.</p>"},{"location":"push/#basic-push","title":"Basic Push","text":""},{"location":"push/#git-push","title":"<code>git push</code>","text":"<p>Pushes the current branch to the configured upstream branch of the remote repository.</p> <pre><code>git push\n</code></pre>"},{"location":"push/#example","title":"Example","text":"<pre><code>git push\n</code></pre> <p>This command pushes your current branch to its upstream branch on the remote repository.</p>"},{"location":"push/#git-push-remote-branch","title":"<code>git push &lt;remote&gt; &lt;branch&gt;</code>","text":"<p>Pushes a specific branch to a specific remote repository.</p> <pre><code>git push &lt;remote&gt; &lt;branch&gt;\n</code></pre>"},{"location":"push/#example_1","title":"Example","text":"<pre><code>git push origin main\n</code></pre> <p>This command pushes the <code>main</code> branch to the <code>origin</code> remote.</p>"},{"location":"push/#setting-upstream-branch","title":"Setting Upstream Branch","text":""},{"location":"push/#git-push-u-remote-branch","title":"<code>git push -u &lt;remote&gt; &lt;branch&gt;</code>","text":"<p>Sets the upstream branch for the current branch and pushes the branch.</p> <pre><code>git push -u &lt;remote&gt; &lt;branch&gt;\n</code></pre>"},{"location":"push/#example_2","title":"Example","text":"<pre><code>git push -u origin feature-branch\n</code></pre> <p>This command pushes the <code>feature-branch</code> to the <code>origin</code> remote and sets it as the upstream branch for the current branch.</p>"},{"location":"push/#force-push","title":"Force Push","text":""},{"location":"push/#git-push-force","title":"<code>git push --force</code>","text":"<p>Forces the push to the remote repository, overwriting the remote branch with your local branch.</p> <pre><code>git push --force\n</code></pre>"},{"location":"push/#example_3","title":"Example","text":"<pre><code>git push --force origin main\n</code></pre> <p>This command forcefully pushes the <code>main</code> branch to the <code>origin</code> remote, overwriting any conflicting changes.</p>"},{"location":"push/#git-push-force-with-lease","title":"<code>git push --force-with-lease</code>","text":"<p>Forces the push but only if the remote branch has not been updated since the last pull.</p> <pre><code>git push --force-with-lease\n</code></pre>"},{"location":"push/#example_4","title":"Example","text":"<pre><code>git push --force-with-lease origin main\n</code></pre> <p>This command forcefully pushes the <code>main</code> branch to the <code>origin</code> remote but only if there are no new commits on the remote <code>main</code> branch.</p>"},{"location":"push/#pushing-tags","title":"Pushing Tags","text":""},{"location":"push/#git-push-tags","title":"<code>git push --tags</code>","text":"<p>Pushes all tags to the remote repository.</p> <pre><code>git push --tags\n</code></pre>"},{"location":"push/#example_5","title":"Example","text":"<pre><code>git push --tags\n</code></pre> <p>This command pushes all your local tags to the remote repository.</p>"},{"location":"push/#deleting-a-remote-branch","title":"Deleting a Remote Branch","text":""},{"location":"push/#git-push-remote-delete-branch","title":"<code>git push &lt;remote&gt; --delete &lt;branch&gt;</code>","text":"<p>Deletes a branch from the remote repository.</p> <pre><code>git push &lt;remote&gt; --delete &lt;branch&gt;\n</code></pre>"},{"location":"push/#example_6","title":"Example","text":"<pre><code>git push origin --delete feature-branch\n</code></pre> <p>This command deletes the <code>feature-branch</code> from the <code>origin</code> remote.</p>"},{"location":"push/#pushing-to-multiple-remotes","title":"Pushing to Multiple Remotes","text":""},{"location":"push/#git-push-remote1-branch-git-push-remote2-branch","title":"<code>git push &lt;remote1&gt; &lt;branch&gt; &amp;&amp; git push &lt;remote2&gt; &lt;branch&gt;</code>","text":"<p>Pushes a branch to multiple remote repositories.</p> <pre><code>git push &lt;remote1&gt; &lt;branch&gt; &amp;&amp; git push &lt;remote2&gt; &lt;branch&gt;\n</code></pre>"},{"location":"push/#example_7","title":"Example","text":"<pre><code>git push origin main &amp;&amp; git push backup main\n</code></pre> <p>This command pushes the <code>main</code> branch to both the <code>origin</code> and <code>backup</code> remotes.</p>"},{"location":"push/#summary","title":"Summary","text":"<p>The <code>git push</code> command is essential for transferring commits from your local repository to a remote repository. It can be used in various ways to suit different workflows, from basic pushing to force pushing and pushing tags. For more detailed information on each command, refer to the official Git documentation.</p>"},{"location":"rebase/","title":"Git Rebase Commands","text":""},{"location":"rebase/#overview","title":"Overview","text":"<p>The <code>git rebase</code> command allows you to integrate changes from one branch into another. It is an alternative to merging and can create a cleaner project history by moving or combining a sequence of commits.</p>"},{"location":"rebase/#basic-rebase","title":"Basic Rebase","text":""},{"location":"rebase/#git-rebase-branch","title":"<code>git rebase &lt;branch&gt;</code>","text":"<p>Rebases the current branch onto the specified branch.</p> <pre><code>git rebase &lt;branch&gt;\n</code></pre>"},{"location":"rebase/#example","title":"Example","text":"<pre><code>git rebase main\n</code></pre> <p>This command moves the commits from the current branch on top of the <code>main</code> branch.</p>"},{"location":"rebase/#interactive-rebase","title":"Interactive Rebase","text":""},{"location":"rebase/#git-rebase-i-base","title":"<code>git rebase -i &lt;base&gt;</code>","text":"<p>Starts an interactive rebase session, allowing you to edit, reorder, or squash commits.</p> <pre><code>git rebase -i &lt;base&gt;\n</code></pre>"},{"location":"rebase/#example_1","title":"Example","text":"<pre><code>git rebase -i HEAD~3\n</code></pre> <p>This command starts an interactive rebase session for the last three commits.</p>"},{"location":"rebase/#rebase-onto-another-branch","title":"Rebase Onto Another Branch","text":""},{"location":"rebase/#git-rebase-onto-newbase-upstream-branch","title":"<code>git rebase --onto &lt;newbase&gt; &lt;upstream&gt; &lt;branch&gt;</code>","text":"<p>Rebases the <code>branch</code> starting from <code>upstream</code> onto <code>newbase</code>.</p> <pre><code>git rebase --onto &lt;newbase&gt; &lt;upstream&gt; &lt;branch&gt;\n</code></pre>"},{"location":"rebase/#example_2","title":"Example","text":"<pre><code>git rebase --onto main feature~1 feature\n</code></pre> <p>This command rebases the <code>feature</code> branch onto <code>main</code>, starting from one commit before the tip of <code>feature</code>.</p>"},{"location":"rebase/#continue-skip-and-abort-rebase","title":"Continue, Skip, and Abort Rebase","text":""},{"location":"rebase/#git-rebase-continue","title":"<code>git rebase --continue</code>","text":"<p>Continues the rebase after resolving conflicts.</p> <pre><code>git rebase --continue\n</code></pre>"},{"location":"rebase/#example_3","title":"Example","text":"<pre><code>git rebase --continue\n</code></pre> <p>This command continues the rebase process after you have resolved conflicts.</p>"},{"location":"rebase/#git-rebase-skip","title":"<code>git rebase --skip</code>","text":"<p>Skips the current patch during a rebase.</p> <pre><code>git rebase --skip\n</code></pre>"},{"location":"rebase/#example_4","title":"Example","text":"<pre><code>git rebase --skip\n</code></pre> <p>This command skips the current commit during the rebase.</p>"},{"location":"rebase/#git-rebase-abort","title":"<code>git rebase --abort</code>","text":"<p>Aborts the rebase and resets the branch to the state before the rebase began.</p> <pre><code>git rebase --abort\n</code></pre>"},{"location":"rebase/#example_5","title":"Example","text":"<pre><code>git rebase --abort\n</code></pre> <p>This command aborts the rebase process and returns the branch to its original state.</p>"},{"location":"rebase/#rebasing-vs-merging","title":"Rebasing vs. Merging","text":""},{"location":"rebase/#rebasing","title":"Rebasing","text":"<p>Rebasing rewrites the commit history by creating new commits for each commit in the original branch, but with a new base. This can result in a cleaner, linear project history.</p>"},{"location":"rebase/#example_6","title":"Example","text":"<pre><code>git checkout feature\ngit rebase main\n</code></pre> <p>This sequence moves the <code>feature</code> branch commits on top of the <code>main</code> branch.</p>"},{"location":"rebase/#merging","title":"Merging","text":"<p>Merging preserves the commit history and creates a new merge commit that includes changes from both branches.</p>"},{"location":"rebase/#example_7","title":"Example","text":"<pre><code>git checkout main\ngit merge feature\n</code></pre> <p>This sequence merges the <code>feature</code> branch into the <code>main</code> branch, creating a merge commit.</p>"},{"location":"rebase/#summary","title":"Summary","text":"<p>The <code>git rebase</code> command is a powerful tool for streamlining and cleaning up your commit history. It is particularly useful for integrating changes from one branch to another in a linear fashion. For more detailed information on each command, refer to the official Git documentation.</p>"},{"location":"recover/","title":"Git Recover Tutorial","text":""},{"location":"recover/#overview","title":"Overview","text":"<p>Recovering in Git involves various techniques to restore lost commits, branches, or files. This document covers methods to recover from common issues such as accidental deletions, lost commits, and overwritten files.</p>"},{"location":"recover/#recovering-deleted-branches","title":"Recovering Deleted Branches","text":"<p>When a branch is deleted, it can be recovered if it still exists in the repository's reflog.</p>"},{"location":"recover/#example-recovering-a-deleted-branch","title":"Example: Recovering a Deleted Branch","text":"<ol> <li> <p>Check the reflog to find the commit hash of the deleted branch:</p> <pre><code>git reflog\n</code></pre> <p>Look for the entry that shows the deletion of the branch.</p> </li> <li> <p>Create a new branch pointing to the commit hash:</p> <pre><code>git checkout -b &lt;branch-name&gt; &lt;commit-hash&gt;\n</code></pre> </li> </ol>"},{"location":"recover/#example","title":"Example","text":"<pre><code>git checkout -b recovered-branch abc1234\n</code></pre> <p>This creates a new branch named <code>recovered-branch</code> from the commit <code>abc1234</code>.</p>"},{"location":"recover/#recovering-lost-commits","title":"Recovering Lost Commits","text":"<p>If you have lost commits, you can often recover them using the reflog.</p>"},{"location":"recover/#example-using-git-reflog-to-recover-commits","title":"Example: Using Git Reflog to Recover Commits","text":"<ol> <li> <p>Check the reflog to find the commit hash of the lost commit:</p> <pre><code>git reflog\n</code></pre> </li> <li> <p>Check out the lost commit or create a new branch from it:</p> <pre><code>git checkout &lt;commit-hash&gt;\n</code></pre> <p>or</p> <pre><code>git checkout -b &lt;branch-name&gt; &lt;commit-hash&gt;\n</code></pre> </li> </ol>"},{"location":"recover/#example_1","title":"Example","text":"<pre><code>git checkout abc1234\n</code></pre> <p>or</p> <pre><code>git checkout -b recovered-commit abc1234\n</code></pre> <p>This checks out or creates a new branch from the lost commit <code>abc1234</code>.</p>"},{"location":"recover/#recovering-overwritten-files","title":"Recovering Overwritten Files","text":"<p>To recover a file that has been overwritten, you can restore it to a previous version.</p>"},{"location":"recover/#example-restoring-a-file-to-a-previous-version","title":"Example: Restoring a File to a Previous Version","text":"<ol> <li> <p>Find the commit hash where the file was in the desired state:</p> <pre><code>git log -- &lt;file-path&gt;\n</code></pre> </li> <li> <p>Checkout the file from the specific commit:</p> <pre><code>git checkout &lt;commit-hash&gt; -- &lt;file-path&gt;\n</code></pre> </li> </ol>"},{"location":"recover/#example_2","title":"Example","text":"<pre><code>git checkout abc1234 -- path/to/file.txt\n</code></pre> <p>This restores <code>file.txt</code> to its state in commit <code>abc1234</code>.</p>"},{"location":"recover/#undoing-the-last-commit","title":"Undoing the Last Commit","text":"<p>You can undo the last commit using <code>git reset</code> or <code>git revert</code>.</p>"},{"location":"recover/#example-using-git-reset-to-undo-a-commit","title":"Example: Using Git Reset to Undo a Commit","text":"<ol> <li> <p>Use <code>git reset</code> to undo the last commit:</p> <pre><code>git reset --soft HEAD~1\n</code></pre> <p>or</p> <pre><code>git reset --hard HEAD~1\n</code></pre> <ul> <li><code>--soft</code>: Keeps changes in the staging area.</li> <li><code>--hard</code>: Discards changes.</li> </ul> </li> </ol>"},{"location":"recover/#example_3","title":"Example","text":"<pre><code>git reset --soft HEAD~1\n</code></pre> <p>This undoes the last commit but keeps the changes staged.</p>"},{"location":"recover/#example-using-git-revert-to-undo-a-commit","title":"Example: Using Git Revert to Undo a Commit","text":"<ol> <li> <p>Use <code>git revert</code> to create a new commit that undoes the changes of the specified commit:</p> <pre><code>git revert &lt;commit-hash&gt;\n</code></pre> </li> </ol>"},{"location":"recover/#example_4","title":"Example","text":"<pre><code>git revert abc1234\n</code></pre> <p>This creates a new commit that undoes the changes made in commit <code>abc1234</code>.</p>"},{"location":"recover/#useful-tips","title":"Useful Tips","text":"<ul> <li>Regular Backups: Regularly push your branches to a remote repository to ensure that you have backups.</li> <li>Use Reflog: The reflog is a powerful tool for recovering lost commits and branches. Use it to find the commit hashes you need.</li> <li>Commit Messages: Use descriptive commit messages to make it easier to identify specific commits in the log.</li> </ul>"},{"location":"recover/#summary","title":"Summary","text":"<p>Recovering in Git involves using various commands and techniques to restore deleted branches, lost commits, and overwritten files. By understanding how to use reflog, reset, revert, and other Git tools, you can effectively recover from common issues and maintain a clean and reliable repository.</p>"},{"location":"send_email/","title":"Git Send Email Tutorial","text":""},{"location":"send_email/#overview","title":"Overview","text":"<p>The <code>git send-email</code> command is used to send patches via email. This is particularly useful for contributing to projects that use mailing lists for code reviews and patch submissions. The command allows you to send patches created with <code>git format-patch</code> directly to an email address.</p>"},{"location":"send_email/#what-is-git-send-email","title":"What is <code>git send-email</code>?","text":"<p><code>git send-email</code> is a Git command that facilitates sending patches via email. It is used in workflows where patches need to be reviewed or submitted via mailing lists. It integrates with Git\u2019s patch management and email configuration tools to send patches directly from the command line.</p>"},{"location":"send_email/#setting-up-git-send-email","title":"Setting Up <code>git send-email</code>","text":"<p>Before using <code>git send-email</code>, you need to configure your email settings. This involves setting up the email server and user credentials in your Git configuration.</p>"},{"location":"send_email/#configure-email-settings","title":"Configure Email Settings","text":"<ol> <li> <p>Set the Email Address:</p> <pre><code>git config --global user.email \"your-email@example.com\"\n</code></pre> </li> <li> <p>Configure the SMTP Server:</p> <p>Add your SMTP server details to your Git configuration. Replace placeholders with actual values:</p> <pre><code>git config --global sendemail.smtpserver \"smtp.example.com\"\ngit config --global sendemail.smtpuser \"your-username\"\ngit config --global sendemail.smtppass \"your-password\"\n</code></pre> </li> <li> <p>Optional: Configure Other Email Settings:</p> <pre><code>git config --global sendemail.smtpport \"587\"\ngit config --global sendemail.smtpssl \"true\"\n</code></pre> </li> </ol>"},{"location":"send_email/#sending-patches","title":"Sending Patches","text":"<p>Once you have configured <code>git send-email</code>, you can send patches via email.</p>"},{"location":"send_email/#basic-syntax","title":"Basic Syntax","text":"<pre><code>git send-email [options] &lt;patch-files&gt;\n</code></pre>"},{"location":"send_email/#example-sending-a-patch-via-email","title":"Example: Sending a Patch via Email","text":"<ol> <li> <p>Create a Patch File:</p> <p>First, create a patch file using <code>git format-patch</code>:</p> <pre><code>git format-patch -1 HEAD\n</code></pre> <p>This generates a patch file named <code>0001-&lt;commit-message&gt;.patch</code>.</p> </li> <li> <p>Send the Patch File via Email:</p> <p>Use <code>git send-email</code> to send the patch:</p> <pre><code>git send-email 0001-&lt;commit-message&gt;.patch\n</code></pre> <p>By default, <code>git send-email</code> will prompt for recipient email addresses and other details.</p> </li> </ol>"},{"location":"send_email/#example-sending-multiple-patches","title":"Example: Sending Multiple Patches","text":"<p>To send multiple patches, specify the patch files:</p> <pre><code>git send-email 0001-patch1.patch 0002-patch2.patch\n</code></pre> <p>You can also use a pattern to match multiple patch files:</p> <pre><code>git send-email *.patch\n</code></pre>"},{"location":"send_email/#examples","title":"Examples","text":""},{"location":"send_email/#example-1-sending-a-single-patch","title":"Example 1: Sending a Single Patch","text":"<ol> <li> <p>Create a Patch:</p> <pre><code>git format-patch -1 HEAD\n</code></pre> </li> <li> <p>Send the Patch:</p> <pre><code>git send-email 0001-Add-new-feature.patch\n</code></pre> </li> <li> <p>Follow the Prompts:</p> <p>Enter the recipient email address and any other required information.</p> </li> </ol>"},{"location":"send_email/#example-2-sending-patches-to-a-mailing-list","title":"Example 2: Sending Patches to a Mailing List","text":"<ol> <li> <p>Create Multiple Patches:</p> <pre><code>git format-patch HEAD~3..HEAD\n</code></pre> </li> <li> <p>Send Patches to a Mailing List:</p> <pre><code>git send-email --to=\"patches@project.org\" *.patch\n</code></pre> </li> </ol>"},{"location":"send_email/#common-use-cases","title":"Common Use Cases","text":"<ul> <li>Contributing to Open Source Projects: Many projects use mailing lists for code reviews and patch submissions.</li> <li>Submitting Patches for Review: Sending patches for review and discussion before merging them into the main codebase.</li> <li>Archiving Changes: Sending patches as part of an email thread for record-keeping or documentation.</li> </ul>"},{"location":"send_email/#summary","title":"Summary","text":"<p><code>git send-email</code> is a powerful tool for sending patches via email, particularly in workflows involving mailing lists and code reviews. By configuring your email settings and using the command, you can streamline the process of sharing changes with collaborators and maintaining a clean and organized codebase.</p>"},{"location":"show/","title":"Git Show Tutorial","text":""},{"location":"show/#overview","title":"Overview","text":"<p>The <code>git show</code> command is used to display various types of information from Git repositories. It is commonly used to show details about commits, tags, and other objects in the repository. This command provides insights into changes made, including commit messages, diffs, and more.</p>"},{"location":"show/#what-is-git-show","title":"What is <code>git show</code>","text":"<p><code>git show</code> is a Git command used to display information about various objects in a Git repository. It can show details about commits, tags, trees, and blobs, providing information such as commit messages, diffs, and metadata.</p>"},{"location":"show/#basic-syntax","title":"Basic Syntax","text":"<pre><code>git show [options] &lt;object&gt;\n</code></pre> <ul> <li><code>&lt;object&gt;</code>: The commit hash, tag, or other Git object you want to display.</li> <li><code>[options]</code>: Additional options to modify the output.</li> </ul>"},{"location":"show/#using-git-show-with-commits","title":"Using <code>git show</code> with Commits","text":"<p>By default, <code>git show</code> displays information about a specific commit, including the commit message and diff.</p>"},{"location":"show/#example-show-details-of-a-commit","title":"Example: Show Details of a Commit","text":"<p>To display details of a specific commit:</p> <pre><code>git show &lt;commit-hash&gt;\n</code></pre>"},{"location":"show/#example-show-commit-with-custom-formatting","title":"Example: Show Commit with Custom Formatting","text":"<p>To show a commit with a custom format for the commit message:</p> <pre><code>git show &lt;commit-hash&gt; --pretty=format:\"%h - %an, %ar : %s\"\n</code></pre>"},{"location":"show/#using-git-show-with-tags","title":"Using <code>git show</code> with Tags","text":"<p>You can also use <code>git show</code> to display details about a tag, including the commit it points to and any associated annotations.</p>"},{"location":"show/#example-show-tag-details","title":"Example: Show Tag Details","text":"<p>To display information about a specific tag:</p> <pre><code>git show &lt;tag-name&gt;\n</code></pre>"},{"location":"show/#using-git-show-with-other-objects","title":"Using <code>git show</code> with Other Objects","text":"<p><code>git show</code> can be used to display information about other Git objects, such as trees and blobs.</p>"},{"location":"show/#example-show-tree-object","title":"Example: Show Tree Object","text":"<p>To show the contents of a tree object (e.g., a directory structure):</p> <pre><code>git show &lt;tree-hash&gt;\n</code></pre>"},{"location":"show/#example-show-blob-object","title":"Example: Show Blob Object","text":"<p>To display the contents of a blob object (i.e., file contents):</p> <pre><code>git show &lt;blob-hash&gt;\n</code></pre>"},{"location":"show/#examples-of-using-git-show","title":"Examples of Using <code>git show</code>","text":""},{"location":"show/#example-1-show-the-latest-commit","title":"Example 1: Show the Latest Commit","text":"<p>To display the details of the latest commit:</p> <pre><code>git show HEAD\n</code></pre>"},{"location":"show/#example-2-show-a-commit-with-a-diff","title":"Example 2: Show a Commit with a Diff","text":"<p>To show a specific commit along with the diff of changes:</p> <pre><code>git show &lt;commit-hash&gt;\n</code></pre>"},{"location":"show/#example-3-show-a-tag-and-its-commit","title":"Example 3: Show a Tag and Its Commit","text":"<p>To display a tag and the commit it points to:</p> <pre><code>git show v1.0.0\n</code></pre>"},{"location":"show/#example-4-show-the-contents-of-a-specific-file-in-a-commit","title":"Example 4: Show the Contents of a Specific File in a Commit","text":"<p>To view the contents of a file as it was in a specific commit:</p> <pre><code>git show &lt;commit-hash&gt;:path/to/file\n</code></pre>"},{"location":"show/#example-5-show-a-commit-with-a-custom-output-format","title":"Example 5: Show a Commit with a Custom Output Format","text":"<p>To format the commit message and metadata:</p> <pre><code>git show &lt;commit-hash&gt; --pretty=format:\"%h - %an, %ar : %s\" --no-patch\n</code></pre>"},{"location":"show/#common-use-cases","title":"Common Use Cases","text":"<ul> <li>Inspecting Commits: View detailed information about commits, including changes and commit messages.</li> <li>Examining Tags: Display information about tags and their associated commits.</li> <li>Reviewing Changes: Review the changes introduced by a specific commit or object.</li> </ul>"},{"location":"show/#summary","title":"Summary","text":"<p>The <code>git show</code> command is a versatile tool for displaying detailed information about Git objects, including commits, tags, trees, and blobs. It allows you to view commit messages, diffs, and other metadata, making it useful for inspecting and reviewing changes in your repository.</p>"},{"location":"squash/","title":"Git Squash Tutorial","text":""},{"location":"squash/#overview","title":"Overview","text":"<p>Git squash allows you to combine multiple commits into a single commit. This is particularly useful for cleaning up your commit history before merging a feature branch into the main branch. This document will cover the basics of using git squash with examples.</p>"},{"location":"squash/#what-is-git-squash","title":"What is Git Squash?","text":"<p>Git squash is the process of combining multiple commits into one. This helps to simplify the commit history and make it more readable.</p>"},{"location":"squash/#interactive-rebase-for-squashing-commits","title":"Interactive Rebase for Squashing Commits","text":"<p>The most common way to squash commits is by using an interactive rebase. This allows you to choose which commits to squash and how to combine them.</p>"},{"location":"squash/#example-squashing-the-last-two-commits","title":"Example: Squashing the Last Two Commits","text":"<ol> <li> <p>Start an interactive rebase for the last two commits:</p> <pre><code>git rebase -i HEAD~2\n</code></pre> </li> <li> <p>In the interactive rebase editor, you will see something like this:</p> <pre><code>pick abc1234 Commit message 1\npick def5678 Commit message 2\n</code></pre> </li> <li> <p>Change the second <code>pick</code> to <code>squash</code> (or <code>s</code>):</p> <pre><code>pick abc1234 Commit message 1\nsquash def5678 Commit message 2\n</code></pre> </li> <li> <p>Save and close the editor. Another editor will open to combine the commit messages. Edit as necessary, then save and close.</p> </li> <li> <p>Your commits are now squashed into one.</p> </li> </ol>"},{"location":"squash/#example-squashing-multiple-commits","title":"Example: Squashing Multiple Commits","text":"<ol> <li> <p>Start an interactive rebase for the last four commits:</p> <pre><code>git rebase -i HEAD~4\n</code></pre> </li> <li> <p>In the interactive rebase editor, you will see something like this:</p> <pre><code>pick abc1234 Commit message 1\npick def5678 Commit message 2\npick ghi9101 Commit message 3\npick jkl1121 Commit message 4\n</code></pre> </li> <li> <p>Change all but the first <code>pick</code> to <code>squash</code> (or <code>s</code>):</p> <pre><code>pick abc1234 Commit message 1\nsquash def5678 Commit message 2\nsquash ghi9101 Commit message 3\nsquash jkl1121 Commit message 4\n</code></pre> </li> <li> <p>Save and close the editor. Another editor will open to combine the commit messages. Edit as necessary, then save and close.</p> </li> <li> <p>Your commits are now squashed into one.</p> </li> </ol>"},{"location":"squash/#using-commit-squash","title":"Using <code>commit --squash</code>","text":"<p>The <code>--squash</code> option can be used with <code>git commit</code> to combine changes into a previous commit without immediately amending the commit.</p>"},{"location":"squash/#example","title":"Example","text":"<ol> <li> <p>Make some changes and stage them:</p> <pre><code>git add file1.txt\n</code></pre> </li> <li> <p>Use <code>commit --squash</code> to prepare to squash these changes into a previous commit:</p> <pre><code>git commit --squash &lt;commit-hash&gt;\n</code></pre> </li> <li> <p>Complete the squash by performing a rebase:</p> <pre><code>git rebase -i HEAD~2\n</code></pre> </li> <li> <p>Follow the interactive rebase steps as described earlier to finalize the squash.</p> </li> </ol>"},{"location":"squash/#squashing-commits-during-a-merge","title":"Squashing Commits During a Merge","text":"<p>When merging a feature branch into the main branch, you can squash all commits into a single commit.</p>"},{"location":"squash/#example_1","title":"Example","text":"<ol> <li> <p>Check out the main branch:</p> <pre><code>git checkout main\n</code></pre> </li> <li> <p>Merge the feature branch with the <code>--squash</code> option:</p> <pre><code>git merge --squash feature-branch\n</code></pre> </li> <li> <p>Commit the squashed changes:</p> <pre><code>git commit -m \"Merge feature-branch with squash\"\n</code></pre> </li> </ol> <p>This will combine all the commits from <code>feature-branch</code> into a single commit on <code>main</code>.</p>"},{"location":"squash/#useful-tips","title":"Useful Tips","text":"<ul> <li>Backup Important Changes: Before performing a rebase or squash, ensure you have backups of important work or work on a separate branch.</li> <li>Interactive Rebase: Use <code>git rebase -i</code> for greater control over how commits are squashed and merged.</li> <li>Use Descriptive Commit Messages: When combining commit messages during a squash, make sure to create a comprehensive and descriptive message that accurately reflects the changes.</li> </ul>"},{"location":"squash/#summary","title":"Summary","text":"<p>Git squash is a powerful tool for cleaning up commit history and making it more readable. By understanding how to use interactive rebase, <code>commit --squash</code>, and squashing during merges, you can maintain a cleaner and more manageable repository.</p>"},{"location":"stash/","title":"Git Stash Commands","text":""},{"location":"stash/#overview","title":"Overview","text":"<p>The <code>git stash</code> command temporarily shelves (or stashes) changes you've made to your working directory so you can work on something else and then come back and re-apply them later. This is useful when you want to switch branches but aren't ready to commit your current work.</p>"},{"location":"stash/#basic-stashing","title":"Basic Stashing","text":""},{"location":"stash/#git-stash","title":"<code>git stash</code>","text":"<p>Saves your local modifications away and reverts the working directory to match the HEAD commit.</p> <pre><code>git stash\n</code></pre>"},{"location":"stash/#example","title":"Example","text":"<pre><code>git stash\n</code></pre> <p>This command stashes your changes, allowing you to work from a clean state.</p>"},{"location":"stash/#git-stash-save-message","title":"<code>git stash save \"message\"</code>","text":"<p>Saves your local modifications with a custom message.</p> <pre><code>git stash save \"message\"\n</code></pre>"},{"location":"stash/#example_1","title":"Example","text":"<pre><code>git stash save \"WIP: working on feature\"\n</code></pre> <p>This command stashes your changes with the message \"WIP: working on feature\".</p>"},{"location":"stash/#listing-stashes","title":"Listing Stashes","text":""},{"location":"stash/#git-stash-list","title":"<code>git stash list</code>","text":"<p>Shows the list of stashes you have stored.</p> <pre><code>git stash list\n</code></pre>"},{"location":"stash/#example_2","title":"Example","text":"<pre><code>$ git stash list\nstash@{0}: WIP on main: 4c5b3e7 Add new feature\nstash@{1}: WIP on main: 1a2b3c4 Fix bug\n</code></pre> <p>This command lists all stashes, showing their index, message, and commit reference.</p>"},{"location":"stash/#applying-stashes","title":"Applying Stashes","text":""},{"location":"stash/#git-stash-apply","title":"<code>git stash apply</code>","text":"<p>Applies the changes from a stash to your working directory without removing it from the stash list.</p> <pre><code>git stash apply [stash]\n</code></pre>"},{"location":"stash/#example_3","title":"Example","text":"<pre><code>git stash apply stash@{0}\n</code></pre> <p>This command applies the changes from <code>stash@{0}</code> to your working directory.</p>"},{"location":"stash/#git-stash-pop","title":"<code>git stash pop</code>","text":"<p>Applies the changes from a stash to your working directory and removes it from the stash list.</p> <pre><code>git stash pop [stash]\n</code></pre>"},{"location":"stash/#example_4","title":"Example","text":"<pre><code>git stash pop stash@{0}\n</code></pre> <p>This command applies the changes from <code>stash@{0}</code> to your working directory and removes it from the stash list.</p>"},{"location":"stash/#creating-a-branch-from-a-stash","title":"Creating a Branch from a Stash","text":""},{"location":"stash/#git-stash-branch","title":"<code>git stash branch</code>","text":"<p>Creates and checks out a new branch starting from the commit at which the stash was originally created, then applies the changes from the stash and drops it.</p> <pre><code>git stash branch &lt;branch-name&gt; [stash]\n</code></pre>"},{"location":"stash/#example_5","title":"Example","text":"<pre><code>git stash branch new-feature-branch stash@{0}\n</code></pre> <p>This command creates a new branch <code>new-feature-branch</code> starting from the commit at which <code>stash@{0}</code> was created, applies the stash, and removes it from the stash list.</p>"},{"location":"stash/#dropping-stashes","title":"Dropping Stashes","text":""},{"location":"stash/#git-stash-drop","title":"<code>git stash drop</code>","text":"<p>Removes a single stash from the stash list.</p> <pre><code>git stash drop [stash]\n</code></pre>"},{"location":"stash/#example_6","title":"Example","text":"<pre><code>git stash drop stash@{0}\n</code></pre> <p>This command removes <code>stash@{0}</code> from the stash list.</p>"},{"location":"stash/#git-stash-clear","title":"<code>git stash clear</code>","text":"<p>Removes all stashes from the stash list.</p> <pre><code>git stash clear\n</code></pre>"},{"location":"stash/#example_7","title":"Example","text":"<pre><code>git stash clear\n</code></pre> <p>This command clears all stashes from the stash list.</p>"},{"location":"stash/#stashing-untracked-or-ignored-files","title":"Stashing Untracked or Ignored Files","text":""},{"location":"stash/#git-stash-u","title":"<code>git stash -u</code>","text":"<p>Includes untracked files in the stash.</p> <pre><code>git stash -u\n</code></pre>"},{"location":"stash/#example_8","title":"Example","text":"<pre><code>git stash -u\n</code></pre> <p>This command stashes your changes, including untracked files.</p>"},{"location":"stash/#git-stash-a","title":"<code>git stash -a</code>","text":"<p>Includes all untracked and ignored files in the stash.</p> <pre><code>git stash -a\n</code></pre>"},{"location":"stash/#example_9","title":"Example","text":"<pre><code>git stash -a\n</code></pre> <p>This command stashes your changes, including all untracked and ignored files.</p>"},{"location":"stash/#summary","title":"Summary","text":"<p>The <code>git stash</code> command is a powerful tool for temporarily setting aside changes in your working directory. It allows you to switch branches and work on something else without losing your current work. For more detailed information on each command, refer to the official Git documentation.</p>"},{"location":"status/","title":"Git Status Commands","text":""},{"location":"status/#overview","title":"Overview","text":"<p>The <code>git status</code> command is used to display the state of the working directory and the staging area. It shows which changes have been staged, which haven't, and which files are not being tracked by Git. This document covers the basic and advanced usage of <code>git status</code>.</p>"},{"location":"status/#basic-status","title":"Basic Status","text":""},{"location":"status/#git-status","title":"<code>git status</code>","text":"<p>Displays the state of the working directory and the staging area.</p> <pre><code>git status\n</code></pre>"},{"location":"status/#example","title":"Example","text":"<pre><code>git status\n</code></pre> <p>This command provides a summary of changes in the working directory and staging area, including modified, added, and untracked files.</p>"},{"location":"status/#status-with-verbose-output","title":"Status with Verbose Output","text":""},{"location":"status/#git-status-v","title":"<code>git status -v</code>","text":"<p>Provides verbose output, showing additional details about the changes.</p> <pre><code>git status -v\n</code></pre>"},{"location":"status/#example_1","title":"Example","text":"<pre><code>git status -v\n</code></pre> <p>This command displays additional details about changes in the files, such as the differences in the content of modified files.</p>"},{"location":"status/#status-with-short-format","title":"Status with Short Format","text":""},{"location":"status/#git-status-s","title":"<code>git status -s</code>","text":"<p>Displays a concise, short format of the status output.</p> <pre><code>git status -s\n</code></pre>"},{"location":"status/#example_2","title":"Example","text":"<pre><code>git status -s\n</code></pre> <p>This command provides a brief overview of the status with a shorter format, showing just the file status and changes.</p>"},{"location":"status/#status-with-porcelain-format","title":"Status with Porcelain Format","text":""},{"location":"status/#git-status-porcelain","title":"<code>git status --porcelain</code>","text":"<p>Displays the status in a machine-readable format, which is useful for scripting.</p> <pre><code>git status --porcelain\n</code></pre>"},{"location":"status/#example_3","title":"Example","text":"<pre><code>git status --porcelain\n</code></pre> <p>This command outputs the status in a stable and easy-to-parse format for use in scripts or automated processes.</p>"},{"location":"status/#status-of-specific-files","title":"Status of Specific Files","text":""},{"location":"status/#git-status-file","title":"<code>git status &lt;file&gt;</code>","text":"<p>Displays the status of a specific file.</p> <pre><code>git status &lt;file&gt;\n</code></pre>"},{"location":"status/#example_4","title":"Example","text":"<pre><code>git status src/main.py\n</code></pre> <p>This command shows the status of <code>src/main.py</code>, indicating whether it has been modified, staged, or is untracked.</p>"},{"location":"status/#status-with-path-limiting","title":"Status with Path Limiting","text":""},{"location":"status/#git-status-path","title":"<code>git status &lt;path&gt;</code>","text":"<p>Displays the status of files within a specific path.</p> <pre><code>git status &lt;path&gt;\n</code></pre>"},{"location":"status/#example_5","title":"Example","text":"<pre><code>git status docs/\n</code></pre> <p>This command shows the status of files within the <code>docs/</code> directory, including any changes or untracked files in that directory.</p>"},{"location":"status/#summary","title":"Summary","text":"<p>The <code>git status</code> command is essential for tracking the state of the working directory and staging area. It provides various formats for viewing changes, from a basic overview to detailed or machine-readable outputs. Understanding the status of files helps manage and review changes effectively. For more detailed information on each command, refer to the official Git documentation.</p>"},{"location":"submodule/","title":"Git Submodule Tutorial","text":""},{"location":"submodule/#overview","title":"Overview","text":"<p>Git submodules allow you to include and manage repositories within other repositories. This is useful for including libraries or other dependencies in your project. This document will cover the basics of using git submodules with examples.</p>"},{"location":"submodule/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Adding a Submodule</li> <li>Cloning a Repository with Submodules</li> <li>Initializing and Updating Submodules</li> <li>Working with Submodules<ul> <li>Checking the Status of Submodules</li> <li>Pulling Changes in Submodules</li> <li>Committing Changes in Submodules</li> </ul> </li> <li>Removing a Submodule</li> <li>Useful Tips</li> </ol>"},{"location":"submodule/#adding-a-submodule","title":"Adding a Submodule","text":"<p>To add a submodule to your repository, use:</p> <pre><code>git submodule add &lt;repository-url&gt; &lt;path&gt;\n</code></pre>"},{"location":"submodule/#example","title":"Example","text":"<pre><code>git submodule add https://github.com/example/library.git libs/library\n</code></pre> <p>This will add the <code>library</code> repository as a submodule in the <code>libs/library</code> directory.</p>"},{"location":"submodule/#cloning-a-repository-with-submodules","title":"Cloning a Repository with Submodules","text":"<p>When cloning a repository that contains submodules, use:</p> <pre><code>git clone --recurse-submodules &lt;repository-url&gt;\n</code></pre>"},{"location":"submodule/#example_1","title":"Example","text":"<pre><code>git clone --recurse-submodules https://github.com/example/project.git\n</code></pre> <p>This will clone the <code>project</code> repository and initialize all its submodules.</p>"},{"location":"submodule/#initializing-and-updating-submodules","title":"Initializing and Updating Submodules","text":"<p>If you clone a repository without using <code>--recurse-submodules</code>, you need to initialize and update the submodules manually:</p> <pre><code>git submodule init\ngit submodule update\n</code></pre> <p>Or, you can use a single command:</p> <pre><code>git submodule update --init\n</code></pre>"},{"location":"submodule/#example_2","title":"Example","text":"<pre><code>git submodule update --init\n</code></pre> <p>This will initialize and update all submodules in the repository.</p>"},{"location":"submodule/#working-with-submodules","title":"Working with Submodules","text":""},{"location":"submodule/#checking-the-status-of-submodules","title":"Checking the Status of Submodules","text":"<p>To check the status of submodules, use:</p> <pre><code>git submodule status\n</code></pre>"},{"location":"submodule/#example_3","title":"Example","text":"<pre><code>git submodule status\n</code></pre> <p>This will show the current commit for each submodule.</p>"},{"location":"submodule/#pulling-changes-in-submodules","title":"Pulling Changes in Submodules","text":"<p>To pull the latest changes in all submodules, use:</p> <pre><code>git submodule update --remote\n</code></pre>"},{"location":"submodule/#example_4","title":"Example","text":"<pre><code>git submodule update --remote\n</code></pre> <p>This will pull the latest changes from the submodules' remote repositories.</p>"},{"location":"submodule/#committing-changes-in-submodules","title":"Committing Changes in Submodules","text":"<p>When you make changes in a submodule, you need to commit them within the submodule directory and then commit the updated submodule reference in the main repository.</p>"},{"location":"submodule/#example_5","title":"Example","text":"<ol> <li> <p>Change to the submodule directory and commit changes:</p> <pre><code>cd libs/library\ngit add .\ngit commit -m \"Update library\"\n</code></pre> </li> <li> <p>Change back to the main repository and commit the submodule reference update:</p> <pre><code>cd ../..\ngit add libs/library\ngit commit -m \"Update library submodule reference\"\n</code></pre> </li> </ol>"},{"location":"submodule/#removing-a-submodule","title":"Removing a Submodule","text":"<p>To remove a submodule, you need to delete the submodule entry from the <code>.gitmodules</code> file, the submodule's directory, and the submodule entry in the <code>.git/config</code> file.</p>"},{"location":"submodule/#example_6","title":"Example","text":"<ol> <li> <p>Edit <code>.gitmodules</code> and remove the submodule entry:</p> <pre><code>[submodule \"libs/library\"]\n    path = libs/library\n    url = https://github.com/example/library.git\n</code></pre> </li> <li> <p>Remove the submodule's directory and the <code>.git/config</code> entry:</p> <pre><code>git rm -f libs/library\nrm -rf .git/modules/libs/library\ngit commit -m \"Remove library submodule\"\n</code></pre> </li> </ol>"},{"location":"submodule/#useful-tips","title":"Useful Tips","text":"<ul> <li> <p>Syncing Submodules: To ensure your submodules are in sync with the repository, use:</p> <pre><code>git submodule sync\n</code></pre> </li> <li> <p>Branch Tracking: To track a specific branch in a submodule, use:</p> <pre><code>git config -f .gitmodules submodule.&lt;path&gt;.branch &lt;branch&gt;\n</code></pre> <p>Example:</p> <pre><code>git config -f .gitmodules submodule.libs/library.branch main\n</code></pre> </li> <li> <p>Recurse Option: Many Git commands accept the <code>--recurse-submodules</code> option to perform actions recursively in submodules.</p> </li> </ul>"},{"location":"submodule/#summary","title":"Summary","text":"<p>Git submodules are powerful for managing dependencies in your repositories. By understanding how to add, clone, update, and remove submodules, you can effectively manage projects that depend on other repositories.</p>"},{"location":"subtrees/","title":"Git Subtrees Tutorial","text":""},{"location":"subtrees/#overview","title":"Overview","text":"<p>Git subtrees allow you to include and manage the content of another repository within your own repository. Unlike submodules, subtrees are fully integrated into the parent repository, making them a flexible option for managing project dependencies.</p>"},{"location":"subtrees/#what-is-a-git-subtree","title":"What is a Git Subtree?","text":"<p>A Git subtree allows you to include another Git repository as a subdirectory of your repository. This approach provides a way to manage dependencies or shared code without needing to clone or use submodules.</p>"},{"location":"subtrees/#setting-up-a-git-subtree","title":"Setting Up a Git Subtree","text":""},{"location":"subtrees/#adding-a-subtree","title":"Adding a Subtree","text":"<p>To add a new subtree, you use the <code>git subtree add</code> command. This command pulls the content of the specified repository and adds it to a subdirectory in your repository.</p> <pre><code>git subtree add --prefix=&lt;subdirectory&gt; &lt;repository-url&gt; &lt;branch&gt; --squash\n</code></pre> <ul> <li><code>&lt;subdirectory&gt;</code>: The directory where you want to add the subtree.</li> <li><code>&lt;repository-url&gt;</code>: The URL of the repository you want to add.</li> <li><code>&lt;branch&gt;</code>: The branch of the repository you want to use.</li> <li><code>--squash</code>: Optional. Combines all commits into a single commit.</li> </ul>"},{"location":"subtrees/#example","title":"Example","text":"<pre><code>git subtree add --prefix=libs/some-library https://github.com/example/some-library.git main --squash\n</code></pre> <p>This command adds the <code>some-library</code> repository into the <code>libs/some-library</code> directory of your repository using the <code>main</code> branch and squashes the commits into a single commit.</p>"},{"location":"subtrees/#updating-a-subtree","title":"Updating a Subtree","text":"<p>To update the subtree with the latest changes from the upstream repository, use the <code>git subtree pull</code> command.</p> <pre><code>git subtree pull --prefix=&lt;subdirectory&gt; &lt;repository-url&gt; &lt;branch&gt; --squash\n</code></pre>"},{"location":"subtrees/#example_1","title":"Example","text":"<pre><code>git subtree pull --prefix=libs/some-library https://github.com/example/some-library.git main --squash\n</code></pre> <p>This command updates the <code>libs/some-library</code> directory with the latest changes from the <code>main</code> branch of the <code>some-library</code> repository and squashes the commits.</p>"},{"location":"subtrees/#removing-a-subtree","title":"Removing a Subtree","text":"<p>To remove a subtree, you can simply delete the subdirectory and commit the changes.</p> <pre><code>rm -rf &lt;subdirectory&gt;\ngit add .\ngit commit -m \"Remove subtree &lt;subdirectory&gt;\"\n</code></pre>"},{"location":"subtrees/#example_2","title":"Example","text":"<pre><code>rm -rf libs/some-library\ngit add .\ngit commit -m \"Remove subtree libs/some-library\"\n</code></pre>"},{"location":"subtrees/#basic-git-subtree-commands","title":"Basic Git Subtree Commands","text":"<p>Here are some basic commands for managing Git subtrees:</p> <ul> <li> <p>Add a Subtree:</p> <pre><code>git subtree add --prefix=&lt;subdirectory&gt; &lt;repository-url&gt; &lt;branch&gt; [--squash]\n</code></pre> </li> <li> <p>Pull Updates from a Subtree:</p> <pre><code>git subtree pull --prefix=&lt;subdirectory&gt; &lt;repository-url&gt; &lt;branch&gt; [--squash]\n</code></pre> </li> <li> <p>Push Changes to a Subtree:</p> <pre><code>git subtree push --prefix=&lt;subdirectory&gt; &lt;repository-url&gt; &lt;branch&gt;\n</code></pre> </li> <li> <p>Split a Subtree into a Separate Repository:</p> <pre><code>git subtree split --prefix=&lt;subdirectory&gt; --branch=&lt;new-branch&gt;\n</code></pre> </li> </ul>"},{"location":"subtrees/#examples-of-using-git-subtrees","title":"Examples of Using Git Subtrees","text":""},{"location":"subtrees/#example-1-adding-a-subtree","title":"Example 1: Adding a Subtree","text":"<p>Suppose you want to add a library located at <code>https://github.com/example/lib.git</code> into your project under <code>libs/lib</code>. You can do this as follows:</p> <pre><code>git subtree add --prefix=libs/lib https://github.com/example/lib.git main --squash\n</code></pre>"},{"location":"subtrees/#example-2-updating-a-subtree","title":"Example 2: Updating a Subtree","text":"<p>To update the <code>libs/lib</code> directory with the latest changes from the upstream repository:</p> <pre><code>git subtree pull --prefix=libs/lib https://github.com/example/lib.git main --squash\n</code></pre>"},{"location":"subtrees/#example-3-pushing-changes-to-a-subtree","title":"Example 3: Pushing Changes to a Subtree","text":"<p>If you have made changes to the <code>libs/lib</code> subtree and want to push those changes back to the upstream repository:</p> <pre><code>git subtree push --prefix=libs/lib https://github.com/example/lib.git main\n</code></pre>"},{"location":"subtrees/#example-4-splitting-a-subtree","title":"Example 4: Splitting a Subtree","text":"<p>If you want to extract <code>libs/lib</code> into its own repository, use the <code>split</code> command:</p> <pre><code>git subtree split --prefix=libs/lib --branch=lib-extract\n</code></pre>"},{"location":"subtrees/#common-use-cases","title":"Common Use Cases","text":"<ul> <li>Managing Dependencies: Include external libraries or dependencies within your project.</li> <li>Code Sharing: Share common code across multiple projects.</li> <li>Modularization: Separate large projects into smaller, more manageable pieces.</li> <li>Maintaining Legacy Code: Include and maintain legacy codebases within a new project.</li> </ul>"},{"location":"subtrees/#summary","title":"Summary","text":"<p>Git subtrees provide a powerful way to manage and integrate external repositories into your project. They offer a more seamless experience compared to submodules by fully incorporating the external repository into your project's history. Use Git subtrees to handle dependencies, share code, and manage modular projects effectively.</p>"},{"location":"svn/","title":"Git-SVN Tutorial","text":""},{"location":"svn/#overview","title":"Overview","text":"<p>Git-SVN is a Git command-line tool that allows you to interact with Subversion (SVN) repositories using Git. It provides a way to use Git as a client for SVN, allowing you to leverage Git's features while working with SVN repositories.</p>"},{"location":"svn/#what-is-git-svn","title":"What is Git-SVN?","text":"<p>Git-SVN is a Git extension that allows you to work with Subversion repositories using Git. It enables you to clone, fetch, commit, and merge changes between Git and SVN repositories, making it easier to work with SVN while benefiting from Git's powerful features.</p>"},{"location":"svn/#installing-git-svn","title":"Installing Git-SVN","text":""},{"location":"svn/#installation-on-windows","title":"Installation on Windows","text":"<ol> <li> <p>Install Git: Download and install Git from the official Git website.</p> </li> <li> <p>Install Git-SVN: Git-SVN is included with Git for Windows. If you have Git installed, you should already have Git-SVN available.</p> </li> <li> <p>Verify Installation: Open a command prompt and run:</p> <pre><code>git svn --version\n</code></pre> </li> </ol>"},{"location":"svn/#installation-on-macoslinux","title":"Installation on macOS/Linux","text":"<ol> <li> <p>Install Git: Use your package manager to install Git.</p> <ul> <li>macOS: </li> </ul> <pre><code>brew install git\n</code></pre> <ul> <li>Linux:</li> </ul> <pre><code>sudo apt-get install git\n</code></pre> </li> <li> <p>Install Git-SVN: Git-SVN is included with Git on most systems. If it's not installed, you can install it separately.</p> <ul> <li>macOS:</li> </ul> <pre><code>brew install git-svn\n</code></pre> <ul> <li>Linux:</li> </ul> <pre><code>sudo apt-get install git-svn\n</code></pre> </li> <li> <p>Verify Installation:</p> <pre><code>git svn --version\n</code></pre> </li> </ol>"},{"location":"svn/#basic-git-svn-commands","title":"Basic Git-SVN Commands","text":""},{"location":"svn/#cloning-an-svn-repository","title":"Cloning an SVN Repository","text":"<p>To clone an SVN repository into a Git repository:</p> <pre><code>git svn clone &lt;svn-repository-url&gt; --no-minimize-url --authors-file=authors.txt\n</code></pre> <ul> <li><code>&lt;svn-repository-url&gt;</code>: The URL of the SVN repository.</li> <li><code>--no-minimize-url</code>: Prevents URL minimization.</li> <li><code>--authors-file=authors.txt</code>: (Optional) Maps SVN authors to Git authors.</li> </ul>"},{"location":"svn/#fetching-changes-from-svn","title":"Fetching Changes from SVN","text":"<p>To fetch the latest changes from SVN into your Git repository:</p> <pre><code>git svn fetch\n</code></pre>"},{"location":"svn/#committing-changes-to-svn","title":"Committing Changes to SVN","text":"<p>To commit your local changes to the SVN repository:</p> <pre><code>git svn dcommit\n</code></pre>"},{"location":"svn/#viewing-svn-logs","title":"Viewing SVN Logs","text":"<p>To view SVN logs:</p> <pre><code>git svn log\n</code></pre>"},{"location":"svn/#creating-a-branch-in-svn","title":"Creating a Branch in SVN","text":"<p>To create a new branch in SVN:</p> <pre><code>git svn branch &lt;branch-name&gt;\n</code></pre>"},{"location":"svn/#merging-svn-branches","title":"Merging SVN Branches","text":"<p>To merge changes from one SVN branch into another:</p> <pre><code>git svn rebase\n</code></pre>"},{"location":"svn/#examples-of-using-git-svn","title":"Examples of Using Git-SVN","text":""},{"location":"svn/#example-1-cloning-an-svn-repository","title":"Example 1: Cloning an SVN Repository","text":"<p>Clone an SVN repository into a local Git repository:</p> <pre><code>git svn clone http://svn-server/repository/trunk --no-minimize-url\n</code></pre>"},{"location":"svn/#example-2-fetching-changes","title":"Example 2: Fetching Changes","text":"<p>Fetch the latest changes from the SVN repository:</p> <pre><code>git svn fetch\n</code></pre>"},{"location":"svn/#example-3-committing-changes","title":"Example 3: Committing Changes","text":"<p>Commit your local changes to the SVN repository:</p> <pre><code>git svn dcommit\n</code></pre>"},{"location":"svn/#example-4-viewing-logs","title":"Example 4: Viewing Logs","text":"<p>View the SVN logs:</p> <pre><code>git svn log\n</code></pre>"},{"location":"svn/#example-5-creating-a-branch","title":"Example 5: Creating a Branch","text":"<p>Create a new branch in the SVN repository:</p> <pre><code>git svn branch feature/new-feature\n</code></pre>"},{"location":"svn/#example-6-merging-branches","title":"Example 6: Merging Branches","text":"<p>Merge changes from the <code>feature/new-feature</code> branch into the <code>trunk</code>:</p> <pre><code>git svn rebase\n</code></pre>"},{"location":"svn/#common-use-cases","title":"Common Use Cases","text":"<ul> <li>Migrating to Git: Use Git-SVN to migrate a project from SVN to Git while maintaining SVN history.</li> <li>Hybrid Workflow: Use Git for local development and SVN for centralized version control in larger teams.</li> <li>Working with Legacy Systems: Integrate Git with legacy SVN systems to benefit from Git features without abandoning existing workflows.</li> </ul>"},{"location":"svn/#summary","title":"Summary","text":"<p>Git-SVN is a powerful tool for integrating Git with Subversion, allowing you to use Git's features while working with SVN repositories. By using commands like <code>git svn clone</code>, <code>git svn fetch</code>, and <code>git svn dcommit</code>, you can effectively manage your codebase and synchronize changes between Git and SVN.</p>"},{"location":"tfs/","title":"Git-TFS Tutorial","text":""},{"location":"tfs/#overview","title":"Overview","text":"<p>Git-TFS is a tool that allows you to interact with Team Foundation Server (TFS) and Azure DevOps Server (formerly TFS) from Git. It provides a way to use Git as a client for TFS, allowing you to leverage Git features while working with TFS repositories.</p>"},{"location":"tfs/#what-is-git-tfs","title":"What is Git-TFS?","text":"<p>Git-TFS is an open-source tool that integrates Git with TFS and Azure DevOps Server. It enables Git users to work with TFS repositories, perform operations like cloning, fetching, and pushing changes, and interact with TFS branches and work items.</p>"},{"location":"tfs/#installing-git-tfs","title":"Installing Git-TFS","text":""},{"location":"tfs/#installation-on-windows","title":"Installation on Windows","text":"<ol> <li> <p>Download Git-TFS: You can download Git-TFS binaries from the Git-TFS releases page.</p> </li> <li> <p>Install Git-TFS: Extract the downloaded files and add the directory to your system's <code>PATH</code> environment variable.</p> </li> <li> <p>Verify Installation: Open a command prompt and run:</p> <pre><code>git tfs --version\n</code></pre> </li> </ol>"},{"location":"tfs/#installation-on-macoslinux","title":"Installation on macOS/Linux","text":"<ol> <li> <p>Install via Homebrew (macOS):</p> <pre><code>brew install git-tfs\n</code></pre> </li> <li> <p>Install via Package Manager (Linux): Use your distribution's package manager or follow manual installation instructions provided on the Git-TFS GitHub page.</p> </li> <li> <p>Verify Installation:</p> <pre><code>git tfs --version\n</code></pre> </li> </ol>"},{"location":"tfs/#basic-git-tfs-commands","title":"Basic Git-TFS Commands","text":""},{"location":"tfs/#cloning-a-tfs-repository","title":"Cloning a TFS Repository","text":"<p>To clone a TFS repository into a Git repository:</p> <pre><code>git tfs clone http://tfs-server:8080/tfs/DefaultCollection $/TeamProject/Repository\n</code></pre>"},{"location":"tfs/#fetching-changes-from-tfs","title":"Fetching Changes from TFS","text":"<p>To fetch the latest changes from TFS into your Git repository:</p> <pre><code>git tfs fetch\n</code></pre>"},{"location":"tfs/#pushing-changes-to-tfs","title":"Pushing Changes to TFS","text":"<p>To push your local changes to the TFS repository:</p> <pre><code>git tfs push\n</code></pre>"},{"location":"tfs/#checking-out-a-tfs-branch","title":"Checking Out a TFS Branch","text":"<p>To check out a TFS branch:</p> <pre><code>git tfs checkout $/TeamProject/BranchName\n</code></pre>"},{"location":"tfs/#creating-a-new-tfs-branch","title":"Creating a New TFS Branch","text":"<p>To create a new branch in TFS:</p> <pre><code>git tfs branch $/TeamProject/NewBranch\n</code></pre>"},{"location":"tfs/#merging-tfs-branches","title":"Merging TFS Branches","text":"<p>To merge changes from one TFS branch into another:</p> <pre><code>git tfs merge $/TeamProject/SourceBranch $/TeamProject/TargetBranch\n</code></pre>"},{"location":"tfs/#viewing-tfs-changesets","title":"Viewing TFS Changesets","text":"<p>To view TFS changesets:</p> <pre><code>git tfs changeset &lt;changeset-id&gt;\n</code></pre>"},{"location":"tfs/#resolving-conflicts","title":"Resolving Conflicts","text":"<p>To resolve conflicts between Git and TFS:</p> <pre><code>git tfs checkin --resolve\n</code></pre>"},{"location":"tfs/#examples-of-using-git-tfs","title":"Examples of Using Git-TFS","text":""},{"location":"tfs/#example-1-cloning-a-tfs-repository","title":"Example 1: Cloning a TFS Repository","text":"<p>Clone a TFS repository into a local Git repository:</p> <pre><code>git tfs clone http://tfs-server:8080/tfs/DefaultCollection $/MyProject\n</code></pre>"},{"location":"tfs/#example-2-fetching-changes","title":"Example 2: Fetching Changes","text":"<p>Fetch the latest changes from TFS:</p> <pre><code>git tfs fetch\n</code></pre>"},{"location":"tfs/#example-3-pushing-changes","title":"Example 3: Pushing Changes","text":"<p>Push your local commits to TFS:</p> <pre><code>git tfs push\n</code></pre>"},{"location":"tfs/#example-4-checking-out-a-branch","title":"Example 4: Checking Out a Branch","text":"<p>Check out a specific branch from TFS:</p> <pre><code>git tfs checkout $/MyProject/FeatureBranch\n</code></pre>"},{"location":"tfs/#example-5-merging-branches","title":"Example 5: Merging Branches","text":"<p>Merge changes from a feature branch into the main branch:</p> <pre><code>git tfs merge $/MyProject/FeatureBranch $/MyProject/MainBranch\n</code></pre>"},{"location":"tfs/#example-6-viewing-changesets","title":"Example 6: Viewing Changesets","text":"<p>View details of a specific changeset:</p> <pre><code>git tfs changeset 1234\n</code></pre>"},{"location":"tfs/#common-use-cases","title":"Common Use Cases","text":"<ul> <li>Integrating Git with TFS: Leverage Git features while working with TFS repositories.</li> <li>Managing Branches: Create, check out, and merge branches between Git and TFS.</li> <li>Fetching and Pushing Changes: Synchronize changes between local Git repositories and TFS.</li> <li>Conflict Resolution: Resolve conflicts that arise from interactions between Git and TFS.</li> </ul>"},{"location":"tfs/#summary","title":"Summary","text":"<p>Git-TFS is a powerful tool for integrating Git with TFS, allowing you to use Git's features while working with TFS repositories. By using commands like <code>git tfs clone</code>, <code>git tfs fetch</code>, and <code>git tfs push</code>, you can effectively manage your codebase and synchronize changes between Git and TFS.</p>"},{"location":"undo/","title":"Git Undo Tutorial","text":""},{"location":"undo/#overview","title":"Overview","text":"<p>In Git, undoing changes can mean several different things: undoing local changes, undoing commits, or undoing pushed commits. This document will cover various ways to undo changes in Git with examples.</p>"},{"location":"undo/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Undoing Unstaged Changes</li> <li>Undoing Staged Changes</li> <li>Undoing Commits<ul> <li>Undo Last Commit</li> <li>Undo Multiple Commits</li> </ul> </li> <li>Undoing Pushed Commits</li> <li>Undoing Changes in a Specific File</li> <li>Undoing Merge Commits</li> <li>Useful Tips</li> </ol>"},{"location":"undo/#undoing-unstaged-changes","title":"Undoing Unstaged Changes","text":"<p>To discard changes in the working directory (unstaged changes), use:</p> <pre><code>git checkout -- &lt;file&gt;\n</code></pre>"},{"location":"undo/#example","title":"Example","text":"<pre><code>git checkout -- README.md\n</code></pre> <p>This will revert the changes in <code>README.md</code> to the last committed state.</p>"},{"location":"undo/#undoing-staged-changes","title":"Undoing Staged Changes","text":"<p>To unstage changes that have been added to the staging area, use:</p> <pre><code>git reset HEAD &lt;file&gt;\n</code></pre>"},{"location":"undo/#example_1","title":"Example","text":"<pre><code>git reset HEAD README.md\n</code></pre> <p>This will unstage <code>README.md</code>, but keep the changes in the working directory.</p>"},{"location":"undo/#undoing-commits","title":"Undoing Commits","text":""},{"location":"undo/#undo-last-commit","title":"Undo Last Commit","text":"<p>To undo the last commit but keep the changes in the working directory, use:</p> <pre><code>git reset --soft HEAD~1\n</code></pre>"},{"location":"undo/#example_2","title":"Example","text":"<pre><code>git reset --soft HEAD~1\n</code></pre> <p>This will undo the last commit but keep your changes staged.</p> <p>To undo the last commit and discard the changes, use:</p> <pre><code>git reset --hard HEAD~1\n</code></pre>"},{"location":"undo/#example_3","title":"Example","text":"<pre><code>git reset --hard HEAD~1\n</code></pre> <p>This will undo the last commit and discard the changes.</p>"},{"location":"undo/#undo-multiple-commits","title":"Undo Multiple Commits","text":"<p>To undo multiple commits, specify the number of commits to go back:</p> <pre><code>git reset --hard HEAD~n\n</code></pre>"},{"location":"undo/#example_4","title":"Example","text":"<pre><code>git reset --hard HEAD~3\n</code></pre> <p>This will undo the last three commits and discard the changes.</p>"},{"location":"undo/#undoing-pushed-commits","title":"Undoing Pushed Commits","text":"<p>To undo pushed commits, you can use <code>git revert</code> to create new commits that undo the changes:</p> <pre><code>git revert &lt;commit&gt;\n</code></pre>"},{"location":"undo/#example_5","title":"Example","text":"<pre><code>git revert 1a2b3c4d\n</code></pre> <p>This will create a new commit that undoes the changes introduced by commit <code>1a2b3c4d</code>.</p> <p>To remove the commits entirely, you can force push after resetting:</p> <pre><code>git reset --hard &lt;commit&gt;\ngit push origin &lt;branch&gt; --force\n</code></pre>"},{"location":"undo/#example_6","title":"Example","text":"<pre><code>git reset --hard HEAD~2\ngit push origin main --force\n</code></pre> <p>This will remove the last two commits and force push the changes to the <code>main</code> branch.</p>"},{"location":"undo/#undoing-changes-in-a-specific-file","title":"Undoing Changes in a Specific File","text":"<p>To undo changes in a specific file to a particular commit, use:</p> <pre><code>git checkout &lt;commit&gt; -- &lt;file&gt;\n</code></pre>"},{"location":"undo/#example_7","title":"Example","text":"<pre><code>git checkout HEAD~1 -- README.md\n</code></pre> <p>This will revert <code>README.md</code> to its state in the previous commit.</p>"},{"location":"undo/#undoing-merge-commits","title":"Undoing Merge Commits","text":"<p>To undo a merge commit and keep the changes, use:</p> <pre><code>git revert -m 1 &lt;merge_commit&gt;\n</code></pre>"},{"location":"undo/#example_8","title":"Example","text":"<pre><code>git revert -m 1 1a2b3c4d\n</code></pre> <p>This will revert the merge commit <code>1a2b3c4d</code>.</p> <p>To undo a merge commit and discard the changes, use:</p> <pre><code>git reset --hard &lt;commit_before_merge&gt;\n</code></pre>"},{"location":"undo/#example_9","title":"Example","text":"<pre><code>git reset --hard HEAD~1\n</code></pre> <p>This will reset the branch to the state before the merge commit.</p>"},{"location":"undo/#useful-tips","title":"Useful Tips","text":"<ul> <li>Backup Important Changes: Before using commands that modify commit history or discard changes, ensure that you have backups of important work.</li> <li>Check Status: Use <code>git status</code> to review the current state of your working directory and staging area before making changes.</li> <li>Use Interactive Rebase: For more granular control over commit history, consider using <code>git rebase -i</code>.</li> </ul>"},{"location":"undo/#summary","title":"Summary","text":"<p>Undoing changes in Git can range from discarding local changes to modifying commit history. By understanding and using the appropriate commands, you can manage your repository effectively and maintain a clean commit history.</p>"},{"location":"workflow/","title":"Git Workflow Tutorial","text":""},{"location":"workflow/#overview","title":"Overview","text":"<p>Git workflows define the processes and best practices for using Git to manage code changes and collaborate with others. Understanding and using the right workflow can improve your team's efficiency and ensure a smooth development process. This document covers several common Git workflows with examples.</p>"},{"location":"workflow/#centralized-workflow","title":"Centralized Workflow","text":"<p>The Centralized Workflow is a simple workflow where all developers work directly on a single branch, usually <code>main</code> or <code>master</code>. This is similar to traditional version control systems.</p>"},{"location":"workflow/#workflow-steps","title":"Workflow Steps","text":"<ol> <li> <p>Clone the Repository:</p> <pre><code>git clone &lt;repository-url&gt;\n</code></pre> </li> <li> <p>Make Changes:</p> <p>Edit files and make changes as needed.</p> </li> <li> <p>Add and Commit Changes:</p> <pre><code>git add &lt;file&gt;\ngit commit -m \"Describe your changes\"\n</code></pre> </li> <li> <p>Push Changes:</p> <pre><code>git push origin main\n</code></pre> </li> </ol>"},{"location":"workflow/#example","title":"Example","text":"<p>Developers commit and push their changes directly to the <code>main</code> branch. This workflow is suitable for small teams or projects with a simple development process.</p>"},{"location":"workflow/#feature-branch-workflow","title":"Feature Branch Workflow","text":"<p>The Feature Branch Workflow involves creating separate branches for each new feature or bug fix. This helps keep the <code>main</code> branch clean and stable.</p>"},{"location":"workflow/#workflow-steps_1","title":"Workflow Steps","text":"<ol> <li> <p>Create a Feature Branch:</p> <pre><code>git checkout -b feature-branch\n</code></pre> </li> <li> <p>Make Changes and Commit:</p> <pre><code>git add &lt;file&gt;\ngit commit -m \"Add new feature\"\n</code></pre> </li> <li> <p>Push Feature Branch:</p> <pre><code>git push origin feature-branch\n</code></pre> </li> <li> <p>Create a Pull Request (PR):</p> <p>Create a PR from <code>feature-branch</code> to <code>main</code> on your Git hosting service.</p> </li> <li> <p>Merge PR and Delete Branch:</p> <p>Once approved, merge the PR and delete the feature branch:</p> <pre><code>git branch -d feature-branch\ngit push origin --delete feature-branch\n</code></pre> </li> </ol>"},{"location":"workflow/#example_1","title":"Example","text":"<p>Developers work on separate branches for new features. Once completed, branches are merged into <code>main</code> after code review.</p>"},{"location":"workflow/#gitflow-workflow","title":"Gitflow Workflow","text":"<p>Gitflow is a popular branching model that defines a strict branching strategy with multiple types of branches for different purposes.</p>"},{"location":"workflow/#workflow-steps_2","title":"Workflow Steps","text":"<ol> <li> <p>Initialize Gitflow:</p> <pre><code>git flow init\n</code></pre> </li> <li> <p>Create a Feature Branch:</p> <pre><code>git flow feature start &lt;feature-name&gt;\n</code></pre> </li> <li> <p>Finish a Feature:</p> <pre><code>git flow feature finish &lt;feature-name&gt;\n</code></pre> </li> <li> <p>Create a Release Branch:</p> <pre><code>git flow release start &lt;release-version&gt;\n</code></pre> </li> <li> <p>Finish a Release:</p> <pre><code>git flow release finish &lt;release-version&gt;\n</code></pre> </li> <li> <p>Create a Hotfix Branch:</p> <pre><code>git flow hotfix start &lt;hotfix-version&gt;\n</code></pre> </li> <li> <p>Finish a Hotfix:</p> <pre><code>git flow hotfix finish &lt;hotfix-version&gt;\n</code></pre> </li> </ol>"},{"location":"workflow/#example_2","title":"Example","text":"<p>Gitflow is suitable for projects with planned releases and hotfixes. It uses branches for features, releases, and hotfixes.</p>"},{"location":"workflow/#forking-workflow","title":"Forking Workflow","text":"<p>The Forking Workflow is used in open-source projects where contributors fork the repository, make changes in their fork, and then submit pull requests.</p>"},{"location":"workflow/#workflow-steps_3","title":"Workflow Steps","text":"<ol> <li> <p>Fork the Repository:</p> <p>Use the fork feature on your Git hosting service to create a personal copy.</p> </li> <li> <p>Clone Your Fork:</p> <pre><code>git clone &lt;your-fork-url&gt;\n</code></pre> </li> <li> <p>Create a Feature Branch:</p> <pre><code>git checkout -b feature-branch\n</code></pre> </li> <li> <p>Make Changes and Commit:</p> <pre><code>git add &lt;file&gt;\ngit commit -m \"Add new feature\"\n</code></pre> </li> <li> <p>Push Changes to Fork:</p> <pre><code>git push origin feature-branch\n</code></pre> </li> <li> <p>Create a Pull Request:</p> <p>Create a PR from <code>feature-branch</code> in your fork to <code>main</code> in the original repository.</p> </li> </ol>"},{"location":"workflow/#example_3","title":"Example","text":"<p>Contributors fork the repository, work on their changes in separate branches, and create pull requests to merge changes into the main repository.</p>"},{"location":"workflow/#github-flow","title":"GitHub Flow","text":"<p>GitHub Flow is a simplified workflow for projects that deploy regularly. It focuses on using feature branches and pull requests.</p>"},{"location":"workflow/#workflow-steps_4","title":"Workflow Steps","text":"<ol> <li> <p>Create a Feature Branch:</p> <pre><code>git checkout -b feature-branch\n</code></pre> </li> <li> <p>Make Changes and Commit:</p> <pre><code>git add &lt;file&gt;\ngit commit -m \"Add new feature\"\n</code></pre> </li> <li> <p>Push Changes:</p> <pre><code>git push origin feature-branch\n</code></pre> </li> <li> <p>Create a Pull Request:</p> <p>Create a PR from <code>feature-branch</code> to <code>main</code> on GitHub.</p> </li> <li> <p>Merge PR and Deploy:</p> <p>Merge the PR once approved, and deploy the changes.</p> </li> </ol>"},{"location":"workflow/#example_4","title":"Example","text":"<p>GitHub Flow is ideal for continuous deployment environments where changes are pushed and deployed frequently.</p>"},{"location":"workflow/#gitlab-flow","title":"GitLab Flow","text":"<p>GitLab Flow is a flexible workflow that combines aspects of Gitflow and GitHub Flow. It supports various branching strategies and integrates with CI/CD pipelines.</p>"},{"location":"workflow/#workflow-steps_5","title":"Workflow Steps","text":"<ol> <li> <p>Create a Feature Branch:</p> <pre><code>git checkout -b feature-branch\n</code></pre> </li> <li> <p>Make Changes and Commit:</p> <pre><code>git add &lt;file&gt;\ngit commit -m \"Add new feature\"\n</code></pre> </li> <li> <p>Push Changes:</p> <pre><code>git push origin feature-branch\n</code></pre> </li> <li> <p>Create a Merge Request (MR):</p> <p>Create an MR from <code>feature-branch</code> to <code>main</code> on GitLab.</p> </li> <li> <p>Merge MR and Deploy:</p> <p>Merge the MR once approved, and deploy the changes.</p> </li> </ol>"},{"location":"workflow/#example_5","title":"Example","text":"<p>GitLab Flow provides flexibility in branching strategies and integrates well with GitLab's CI/CD pipelines for automated testing and deployment.</p>"},{"location":"workflow/#choosing-the-right-workflow","title":"Choosing the Right Workflow","text":"<p>The right Git workflow depends on your project\u2019s needs and team structure. Consider factors such as team size, release strategy, and deployment frequency when choosing a workflow. Common workflows include:</p> <ul> <li>Centralized Workflow: For simple projects or small teams.</li> <li>Feature Branch Workflow: For projects with multiple features and releases.</li> <li>Gitflow Workflow: For projects with a structured release and hotfix strategy.</li> <li>Forking Workflow: For open-source projects and large contributor bases.</li> <li>GitHub Flow: For continuous deployment and frequent changes.</li> <li>GitLab Flow: For flexible workflows and integration with CI/CD pipelines.</li> </ul>"},{"location":"workflow/#summary","title":"Summary","text":"<p>Git workflows define how teams manage code changes and collaborate using Git. Understanding and implementing the right workflow can streamline development processes, improve code quality, and enhance team productivity. Whether you use a simple centralized workflow or a more complex strategy like Gitflow or GitLab Flow, choosing the right approach is crucial for effective version control.</p>"},{"location":"worktree/","title":"Git Worktree Command","text":""},{"location":"worktree/#overview","title":"Overview","text":"<p>The <code>git worktree</code> command allows you to manage multiple working directories attached to a single Git repository. This is useful for working on different branches simultaneously without needing to clone the repository multiple times.</p>"},{"location":"worktree/#basic-commands","title":"Basic Commands","text":""},{"location":"worktree/#adding-a-worktree","title":"Adding a Worktree","text":"<p>To add a new worktree, use the following command:</p> <p><pre><code>git worktree add &lt;path&gt; &lt;branch&gt;\n</code></pre> - <code>&lt;path&gt;</code>: The directory where the new worktree will be created. - <code>&lt;branch&gt;</code>: The branch to be checked out in the new worktree.</p> <p>Example <pre><code>git worktree add ../new-feature-branch feature\n</code></pre> This command will create a new directory <code>../new-feature-branch</code> and check out the <code>feature</code> branch in that directory.</p>"},{"location":"worktree/#listing-worktrees","title":"Listing Worktrees","text":"<p>To list all worktrees associated with the repository, use:</p> <p><pre><code>git worktree list\n</code></pre> Example <pre><code>$ git worktree list\n/Users/username/project              a1b2c3d [master]\n/Users/username/new-feature-branch   e4f5g6h [feature]\n</code></pre></p>"},{"location":"worktree/#removing-a-worktree","title":"Removing a Worktree","text":"<p>To remove a worktree, use the following command:</p> <p><pre><code>git worktree remove &lt;path&gt;\n</code></pre> - <code>&lt;path&gt;</code>: The path to the worktree directory you want to remove. Example <pre><code>git worktree remove ../new-feature-branch\n</code></pre> This command will remove the <code>../new-feature-branch</code> worktree.</p>"},{"location":"worktree/#pruning-worktrees","title":"Pruning Worktrees","text":"<p>To remove references to worktrees that no longer exist, use:</p> <p><pre><code>git worktree prune\n</code></pre> Example <pre><code>git worktree prune\n</code></pre> This command will clean up any stale references to deleted worktrees.</p>"},{"location":"worktree/#advanced-usage","title":"Advanced Usage","text":""},{"location":"worktree/#creating-and-checking-out-a-new-branch","title":"Creating and Checking Out a New Branch","text":"<p>You can create a new branch and check it out in a new worktree simultaneously:</p> <p><pre><code>git worktree add &lt;path&gt; -b &lt;new-branch&gt;\n</code></pre> - <code>&lt;path&gt;</code>: The directory where the new worktree will be created. - <code>&lt;new-branch&gt;</code>: The name of the new branch to be created. Example <pre><code>git worktree add ../bugfix -b bugfix-123\n</code></pre> This command will create a new directory <code>../bugfix</code>, create a new branch <code>bugfix-123</code>, and check it out in that directory.</p>"},{"location":"worktree/#detached-worktree","title":"Detached Worktree","text":"<p>You can also create a detached worktree, which is useful for checking out a specific commit without creating a branch:</p> <p><pre><code>git worktree add &lt;path&gt; &lt;commit&gt;\n</code></pre> - <code>&lt;path&gt;</code>: The directory where the new worktree will be created. - <code>&lt;commit&gt;</code>: The commit hash to check out. Example <pre><code>git worktree add ../detached-worktree a1b2c3d4\n</code></pre> This command will create a new directory <code>../detached-worktree</code> and check out the commit <code>a1b2c3d4</code> in a detached HEAD state.</p>"},{"location":"worktree/#benefits-of-using-git-worktree","title":"Benefits of Using Git Worktree","text":"<ul> <li>Simultaneous Branch Development: Work on multiple branches without switching back and forth.</li> <li>Resource Efficiency: Avoid the overhead of cloning the repository multiple times.</li> <li>Context Isolation: Keep changes isolated to their respective directories, reducing the risk of accidental changes.</li> </ul>"},{"location":"worktree/#summary","title":"Summary","text":"<p>The <code>git worktree</code> command is a powerful tool for managing multiple working directories in a single repository. It simplifies workflows that require simultaneous work on different branches, making it easier to handle feature development, bug fixes, and code reviews.</p> <p>For more information, refer to the official Git documentation.</p>"}]}